
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004188  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800453c  0800453c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004544  08004544  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800454c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080045bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080045bc  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ac2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015c9  00000000  00000000  00028b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002a8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168a5  00000000  00000000  0002af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008acf  00000000  00000000  0004182d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008818b  00000000  00000000  0004a2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000d24d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d4e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d4e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004310 	.word	0x08004310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004310 	.word	0x08004310

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <newBoard>:
  // WINDOW *holdWin; // shows hold
  // WINDOW *statsWin; // shows stats, such as level and lines
  // WINDOW *lineClearWin; // shows line clears
};

struct tetBoard newBoard() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b0de      	sub	sp, #376	; 0x178
 8000588:	af00      	add	r7, sp, #0
 800058a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800058e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000592:	6018      	str	r0, [r3, #0]
  struct tetBoard out = {
 8000594:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000598:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800059c:	4618      	mov	r0, r3
 800059e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f002 fc43 	bl	8002e30 <memset>
 80005aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005ae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80005b2:	2201      	movs	r2, #1
 80005b4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80005b8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80005c0:	2202      	movs	r2, #2
 80005c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80005c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80005ce:	2203      	movs	r2, #3
 80005d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80005d4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80005dc:	2204      	movs	r2, #4
 80005de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80005e2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80005ea:	2205      	movs	r2, #5
 80005ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80005f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80005f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80005f8:	2206      	movs	r2, #6
 80005fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80005fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000602:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000606:	2207      	movs	r2, #7
 8000608:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800060c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000610:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000614:	2201      	movs	r2, #1
 8000616:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    .order = {0, 1, 2, 3, 4, 5, 6, 7},
    .lD = 0,
    .level = 1,
  };
  return out;
 800061a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800061e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000628:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800062c:	4610      	mov	r0, r2
 800062e:	4619      	mov	r1, r3
 8000630:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8000634:	461a      	mov	r2, r3
 8000636:	f002 fbed 	bl	8002e14 <memcpy>
}
 800063a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800063e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <shuffle>:

int w, h; // width and height of terminal screen


void shuffle(int *array, size_t n) // copied from https://stackoverflow.com/questions/6127503/shuffle-array-in-c#6127606
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    if (n > 1)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d931      	bls.n	80006c0 <shuffle+0x74>
    {
        size_t i;
        for (i = 0; i < n - 1; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e029      	b.n	80006b6 <shuffle+0x6a>
        {
          size_t j = i + rand() / (RAND_MAX / (n - i) + 1);
 8000662:	f002 fc1b 	bl	8002e9c <rand>
 8000666:	4603      	mov	r3, r0
 8000668:	4619      	mov	r1, r3
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000674:	fbb2 f3f3 	udiv	r3, r2, r3
 8000678:	3301      	adds	r3, #1
 800067a:	fbb1 f3f3 	udiv	r3, r1, r3
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
          int t = array[j];
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60fb      	str	r3, [r7, #12]
          array[j] = array[i];
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	441a      	add	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	440b      	add	r3, r1
 80006a0:	6812      	ldr	r2, [r2, #0]
 80006a2:	601a      	str	r2, [r3, #0]
          array[i] = t;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]
        for (i = 0; i < n - 1; i++)
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	3301      	adds	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3d0      	bcc.n	8000662 <shuffle+0x16>
        }
    }
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <getTetromino>:

int getTetromino(int d, int t, int blocks[4][2]) { // returns the other 3 tetromino blocks when given the center and type of tetromino, and the pointer to the block array.
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  int x, y; // temporary variables

  blocks[3][0] = 0; // ok, change my mind
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3318      	adds	r3, #24
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
  blocks[3][1] = 0; // we are returning all the blocks of the tetromino :p
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3318      	adds	r3, #24
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < 3; i++) { // direction handler
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	e08f      	b.n	800080a <getTetromino+0x142>
    int xC = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
    int yC = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
    if (tetrominoes[t] != 'O') { // square tetrominoes don't rotate.
 80006f2:	4a58      	ldr	r2, [pc, #352]	; (8000854 <getTetromino+0x18c>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b4f      	cmp	r3, #79	; 0x4f
 80006fc:	d065      	beq.n	80007ca <getTetromino+0x102>
      if (d == 1 || d == 2) {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d002      	beq.n	800070a <getTetromino+0x42>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d102      	bne.n	8000710 <getTetromino+0x48>
        yC = -1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070e:	613b      	str	r3, [r7, #16]
      }
      if (d < 2) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b01      	cmp	r3, #1
 8000714:	dc02      	bgt.n	800071c <getTetromino+0x54>
        xC = -1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071a:	617b      	str	r3, [r7, #20]
      }
      blocks[i][0] = (tetShape[t][i][1 * (d % 2)] * xC);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	bfb8      	it	lt
 8000726:	425b      	neglt	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	484b      	ldr	r0, [pc, #300]	; (8000858 <getTetromino+0x190>)
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	69ba      	ldr	r2, [r7, #24]
 8000736:	4413      	add	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	440b      	add	r3, r1
 800073c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	440b      	add	r3, r1
 8000748:	6979      	ldr	r1, [r7, #20]
 800074a:	fb01 f202 	mul.w	r2, r1, r2
 800074e:	601a      	str	r2, [r3, #0]
      blocks[i][1] = (tetShape[t][i][1 * (d % 2 == 0)] * yC);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	bf0c      	ite	eq
 800075a:	2301      	moveq	r3, #1
 800075c:	2300      	movne	r3, #0
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	493d      	ldr	r1, [pc, #244]	; (8000858 <getTetromino+0x190>)
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	4413      	add	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4403      	add	r3, r0
 8000774:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	440b      	add	r3, r1
 8000780:	6939      	ldr	r1, [r7, #16]
 8000782:	fb01 f202 	mul.w	r2, r1, r2
 8000786:	605a      	str	r2, [r3, #4]
      if (tetrominoes[t] == 'I') { // the straight tetromino rotates kinda weird :p
 8000788:	4a32      	ldr	r2, [pc, #200]	; (8000854 <getTetromino+0x18c>)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b49      	cmp	r3, #73	; 0x49
 8000792:	d137      	bne.n	8000804 <getTetromino+0x13c>
        if (d == 1 || d == 2) {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d002      	beq.n	80007a0 <getTetromino+0xd8>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d106      	bne.n	80007ae <getTetromino+0xe6>
          blocks[i][0]++;
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	3201      	adds	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
        }
        if (d > 1) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	dd27      	ble.n	8000804 <getTetromino+0x13c>
          y++;
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	3301      	adds	r3, #1
 80007b8:	61fb      	str	r3, [r7, #28]
          blocks[i][1]++;
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	3201      	adds	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	e01c      	b.n	8000804 <getTetromino+0x13c>
        }
      }
    } else {
      blocks[i][0] = tetShape[t][i][0];
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	18d1      	adds	r1, r2, r3
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <getTetromino+0x190>)
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	69ba      	ldr	r2, [r7, #24]
 80007de:	4413      	add	r3, r2
 80007e0:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 80007e4:	600b      	str	r3, [r1, #0]
      blocks[i][1] = tetShape[t][i][1];
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	18d1      	adds	r1, r2, r3
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <getTetromino+0x190>)
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	4403      	add	r3, r0
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	604b      	str	r3, [r1, #4]
  for (int i = 0; i < 3; i++) { // direction handler
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	3301      	adds	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	2b02      	cmp	r3, #2
 800080e:	f77f af6c 	ble.w	80006ea <getTetromino+0x22>
    }
  }
  if (tetrominoes[t] == 'I') { // the straight tetromino rotates kinda weird :p
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <getTetromino+0x18c>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b49      	cmp	r3, #73	; 0x49
 800081c:	d112      	bne.n	8000844 <getTetromino+0x17c>
    if (d == 1 || d == 2) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d002      	beq.n	800082a <getTetromino+0x162>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d104      	bne.n	8000834 <getTetromino+0x16c>
      blocks[3][0]++;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3318      	adds	r3, #24
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	3201      	adds	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
    }
    if (d > 1) {
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b01      	cmp	r3, #1
 8000838:	dd04      	ble.n	8000844 <getTetromino+0x17c>
      blocks[3][1]++;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3318      	adds	r3, #24
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	3201      	adds	r2, #1
 8000842:	605a      	str	r2, [r3, #4]
    }
  }
}
 8000844:	bf00      	nop
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	0800432c 	.word	0x0800432c
 8000858:	08004334 	.word	0x08004334

0800085c <updateNext>:

void updateNext(struct tetBoard *board) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

//  wprintw(board->nextWin, "-NEXT-");

  int nextBlock[4][2];

  for (int i = 0; i < nextLen; i++) { // draw next blocks
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000868:	e016      	b.n	8000898 <updateNext+0x3c>
    getTetromino(0, board->next[i], nextBlock);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800086e:	3238      	adds	r2, #56	; 0x38
 8000870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000874:	f107 0208 	add.w	r2, r7, #8
 8000878:	4619      	mov	r1, r3
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff ff24 	bl	80006c8 <getTetromino>
//    wattron(board->nextWin, COLOR_PAIR(board->next[i]+1));
    for (int n = 0; n < 4; n++) {
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
 8000884:	e002      	b.n	800088c <updateNext+0x30>
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	3301      	adds	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	2b03      	cmp	r3, #3
 8000890:	ddf9      	ble.n	8000886 <updateNext+0x2a>
  for (int i = 0; i < nextLen; i++) { // draw next blocks
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	3301      	adds	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089a:	2b05      	cmp	r3, #5
 800089c:	dde5      	ble.n	800086a <updateNext+0xe>
//      waddch(board->nextWin, tetrominoes[board->next[i]]);
    }
  }

//  wrefresh(board->nextWin);
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	; 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <popBag>:

int popBag(struct tetBoard *board) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  int pop = board->order[board->orderCount]; // pop tetromino from bag
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	323e      	adds	r2, #62	; 0x3e
 80008ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008be:	60fb      	str	r3, [r7, #12]
  board->orderCount++; // increment "stack pointer"
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  if (board->orderCount > 6) { // if reached end of bag
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80008d4:	2b06      	cmp	r3, #6
 80008d6:	dd09      	ble.n	80008ec <popBag+0x44>
    board->orderCount = 0; // reset "stack pointer"
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    shuffle(board->order, 7); // shuffle order
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	33f8      	adds	r3, #248	; 0xf8
 80008e4:	2107      	movs	r1, #7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff feb0 	bl	800064c <shuffle>
  }
  return pop;
 80008ec:	68fb      	ldr	r3, [r7, #12]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <popNext>:

int popNext(struct tetBoard *board) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  int pop = board->next[0]; // pop tetromino from bag
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < nextLen - 1; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e00d      	b.n	8000928 <popNext+0x32>
    board->next[i] = board->next[i+1]; // move all tetrominoes up one
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3238      	adds	r2, #56	; 0x38
 8000914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	3238      	adds	r2, #56	; 0x38
 800091e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < nextLen - 1; i++) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b04      	cmp	r3, #4
 800092c:	ddee      	ble.n	800090c <popNext+0x16>
  }
  board->next[nextLen - 1] = popBag(board); // get another tetromino into next
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffba 	bl	80008a8 <popBag>
 8000934:	4602      	mov	r2, r0
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  updateNext(board);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff8d 	bl	800085c <updateNext>

  return pop; // finally, return tetromino
 8000942:	68bb      	ldr	r3, [r7, #8]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <findGhost>:
//  getmaxyx(win, h, w);
//  wmove(win, (h / 2) + offset, (w - strlen(s)) / 2);
//  wprintw(win, s);
//}

void findGhost(struct tetBoard *board) {
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  int x, y; // temporary variables

  board->ghostOffset = 0;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  int finished = 0; // variable used to check if a loop is finished or not
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  while (true) { // find the y offset for ghost piece
    for (int i = 0; i < 4; i++) {
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	e030      	b.n	80009c8 <findGhost+0x7c>
      x = board->blocks[i][0] + board->piece.x;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	3225      	adds	r2, #37	; 0x25
 800096c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
      y = board->blocks[i][1] + board->ghostOffset + board->piece.y;
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4413      	add	r3, r2
 8000982:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800098c:	441a      	add	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000994:	4413      	add	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
      if (y == len || (board->grid[x][y] != 0 && x >= 0 && y >= 0)) {
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2b10      	cmp	r3, #16
 800099c:	d00e      	beq.n	80009bc <findGhost+0x70>
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	441a      	add	r2, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d008      	beq.n	80009c2 <findGhost+0x76>
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db05      	blt.n	80009c2 <findGhost+0x76>
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db02      	blt.n	80009c2 <findGhost+0x76>
        finished = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
        break;
 80009c0:	e005      	b.n	80009ce <findGhost+0x82>
    for (int i = 0; i < 4; i++) {
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	3301      	adds	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	ddcb      	ble.n	8000966 <findGhost+0x1a>
      }
    }
    if (finished) {
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <findGhost+0x98>
      break;
    }
    board->ghostOffset++;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    for (int i = 0; i < 4; i++) {
 80009e2:	e7bd      	b.n	8000960 <findGhost+0x14>
      break;
 80009e4:	bf00      	nop
  }

  board->ghostOffset--;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <collision>:


int collision(struct tetBoard *board) { // check for collision
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  getTetromino(board->dir, board->cur, board->blocks);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f7ff fe54 	bl	80006c8 <getTetromino>
  int x, y; // temporary variables

  for (int i = 0; i < 4; i++) { // grid check
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	e034      	b.n	8000a90 <collision+0x90>
    x = board->blocks[i][0] + board->piece.x;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	3225      	adds	r2, #37	; 0x25
 8000a2c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000a36:	4413      	add	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
    y = board->blocks[i][1] + board->piece.y;
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4413      	add	r3, r2
 8000a42:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000a4c:	4413      	add	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (x < 0) { // left check
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	da01      	bge.n	8000a5a <collision+0x5a>
      return 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e01e      	b.n	8000a98 <collision+0x98>
    }

    if (x >= wid) { // right check
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	2b0d      	cmp	r3, #13
 8000a5e:	dd01      	ble.n	8000a64 <collision+0x64>
      return 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e019      	b.n	8000a98 <collision+0x98>
    }

    if (y >= len) { // bottom collision check
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	dd01      	ble.n	8000a6e <collision+0x6e>
      return 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e014      	b.n	8000a98 <collision+0x98>
    }

    if (board->grid[x][y] != 0 && y > 0) {
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	441a      	add	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <collision+0x8a>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	dd01      	ble.n	8000a8a <collision+0x8a>
      return 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e006      	b.n	8000a98 <collision+0x98>
  for (int i = 0; i < 4; i++) { // grid check
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	ddc7      	ble.n	8000a26 <collision+0x26>
    }
  }

  return 0;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <hdrop>:
//   while (getch() != '\n'){}; // wait for enter to be pressed
//   endwin(); // end window
//   exit(0); // exit
// }

void hdrop(struct tetBoard *board) { // hard drop function
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  int x, y; // temporary variables

  board->holdCooldown = 0; // reset hold
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  board->dir = 0;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  board->lD = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  findGhost(board);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff43 	bl	800094c <findGhost>

  for (int i = 0; i < 4; i++) {
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aca:	e029      	b.n	8000b20 <hdrop+0x80>
    // if (y < 1) {
    //   gameOver(board);
    // }
    x = board->blocks[i][0] + board->piece.x;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ad0:	3225      	adds	r2, #37	; 0x25
 8000ad2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000adc:	4413      	add	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
    y = board->blocks[i][1] + board->piece.y + board->ghostOffset;
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000af2:	441a      	add	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    board->grid[x][y] = board->cur + 1; // draw tetromino to grid
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2d9      	uxtb	r1, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	441a      	add	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4413      	add	r3, r2
 8000b16:	460a      	mov	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8000b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	ddd2      	ble.n	8000acc <hdrop+0x2c>
  }

  board->cur = popNext(board);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fee5 	bl	80008f6 <popNext>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  board->piece.x = wid / 2 - 1; // reset x
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2206      	movs	r2, #6
 8000b38:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
  board->piece.y = 0; // and y position
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

  int linesCleared = 0; // number of lines cleared
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28

  for (int y = 0; y < len; y++) { // loop to find cleared lines
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4c:	e041      	b.n	8000bd2 <hdrop+0x132>
    int success = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
    for (int x = 0; x < wid; x++) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	e00e      	b.n	8000b76 <hdrop+0xd6>
      if (board->grid[x][y] == 0) {
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	011b      	lsls	r3, r3, #4
 8000b5e:	441a      	add	r2, r3
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <hdrop+0xd0>
        success = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
        break;
 8000b6e:	e005      	b.n	8000b7c <hdrop+0xdc>
    for (int x = 0; x < wid; x++) {
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	3301      	adds	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	dded      	ble.n	8000b58 <hdrop+0xb8>
      }
    }
    if (success) {
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d024      	beq.n	8000bcc <hdrop+0x12c>
      for (int rY = y; rY > 0; rY--) { // loop to clear lines
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	e01b      	b.n	8000bc0 <hdrop+0x120>
        for (int rX = 0; rX < wid; rX++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e012      	b.n	8000bb4 <hdrop+0x114>
          board->grid[rX][rY] = board->grid[rX][rY-1];
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	440a      	add	r2, r1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	7819      	ldrb	r1, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	441a      	add	r2, r3
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4413      	add	r3, r2
 8000baa:	460a      	mov	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
        for (int rX = 0; rX < wid; rX++) {
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2b0d      	cmp	r3, #13
 8000bb8:	dde9      	ble.n	8000b8e <hdrop+0xee>
      for (int rY = y; rY > 0; rY--) { // loop to clear lines
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	dce0      	bgt.n	8000b88 <hdrop+0xe8>
        }
      }
      linesCleared++;
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	3301      	adds	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int y = 0; y < len; y++) { // loop to find cleared lines
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	3301      	adds	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	ddba      	ble.n	8000b4e <hdrop+0xae>

  //   updateStats(board);
  // }

  // wrefresh(board->lineClearWin);
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <sdrop>:

void sdrop(int a, struct tetBoard *board) { // soft drop function
 8000be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  if (board->lD) {
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d007      	beq.n	8000c08 <sdrop+0x24>
    if (a) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 80be 	beq.w	8000d7c <sdrop+0x198>
      hdrop(board);
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f7ff ff4d 	bl	8000aa0 <hdrop>
    if (board->ghostOffset == 0) {
      board->lD = 1;
      board->timeToDrop = lockDelay;
    }
  }
}
 8000c06:	e0b9      	b.n	8000d7c <sdrop+0x198>
    board->piece.y++;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    if (collision(board)) {
 8000c16:	6838      	ldr	r0, [r7, #0]
 8000c18:	f7ff fef2 	bl	8000a00 <collision>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <sdrop+0x4c>
      board->piece.y--;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    for(uint8_t i=0;i<8;i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e08e      	b.n	8000d54 <sdrop+0x170>
    	display_fin_1[i] = display_blocks_still_1[i] | display_blocks_mov_mem_1[i];
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <sdrop+0x1a0>)
 8000c3a:	5cd1      	ldrb	r1, [r2, r3]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4a52      	ldr	r2, [pc, #328]	; (8000d88 <sdrop+0x1a4>)
 8000c40:	5cd2      	ldrb	r2, [r2, r3]
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	b2d1      	uxtb	r1, r2
 8000c48:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <sdrop+0x1a8>)
 8000c4a:	54d1      	strb	r1, [r2, r3]
		display_fin_2[i] = display_blocks_still_2[i] | display_blocks_mov_mem_2[i];
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4a50      	ldr	r2, [pc, #320]	; (8000d90 <sdrop+0x1ac>)
 8000c50:	5cd1      	ldrb	r1, [r2, r3]
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	4a4f      	ldr	r2, [pc, #316]	; (8000d94 <sdrop+0x1b0>)
 8000c56:	5cd2      	ldrb	r2, [r2, r3]
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	b2d1      	uxtb	r1, r2
 8000c5e:	4a4e      	ldr	r2, [pc, #312]	; (8000d98 <sdrop+0x1b4>)
 8000c60:	54d1      	strb	r1, [r2, r3]
		display_fin_3[i] = display_blocks_still_3[i] | display_blocks_mov_mem_3[i];
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4a4d      	ldr	r2, [pc, #308]	; (8000d9c <sdrop+0x1b8>)
 8000c66:	5cd1      	ldrb	r1, [r2, r3]
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <sdrop+0x1bc>)
 8000c6c:	5cd2      	ldrb	r2, [r2, r3]
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	b2d1      	uxtb	r1, r2
 8000c74:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <sdrop+0x1c0>)
 8000c76:	54d1      	strb	r1, [r2, r3]
		display_fin_4[i] = display_blocks_still_4[i] | display_blocks_mov_mem_4[i];
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	4a4b      	ldr	r2, [pc, #300]	; (8000da8 <sdrop+0x1c4>)
 8000c7c:	5cd1      	ldrb	r1, [r2, r3]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	4a4a      	ldr	r2, [pc, #296]	; (8000dac <sdrop+0x1c8>)
 8000c82:	5cd2      	ldrb	r2, [r2, r3]
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	b2d1      	uxtb	r1, r2
 8000c8a:	4a49      	ldr	r2, [pc, #292]	; (8000db0 <sdrop+0x1cc>)
 8000c8c:	54d1      	strb	r1, [r2, r3]
		write_max_screen(i+1, display_fin_1[i], i+1, display_fin_2[i], i+1, display_fin_3[i], i+1, display_fin_4[i]);
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	1c58      	adds	r0, r3, #1
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	4a3d      	ldr	r2, [pc, #244]	; (8000d8c <sdrop+0x1a8>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	469c      	mov	ip, r3
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	1c5c      	adds	r4, r3, #1
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	4a3d      	ldr	r2, [pc, #244]	; (8000d98 <sdrop+0x1b4>)
 8000ca2:	5cd3      	ldrb	r3, [r2, r3]
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	493d      	ldr	r1, [pc, #244]	; (8000da4 <sdrop+0x1c0>)
 8000cae:	5c8a      	ldrb	r2, [r1, r2]
 8000cb0:	4616      	mov	r6, r2
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	3201      	adds	r2, #1
 8000cb6:	7bf9      	ldrb	r1, [r7, #15]
 8000cb8:	4d3d      	ldr	r5, [pc, #244]	; (8000db0 <sdrop+0x1cc>)
 8000cba:	5c69      	ldrb	r1, [r5, r1]
 8000cbc:	9103      	str	r1, [sp, #12]
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	9601      	str	r6, [sp, #4]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	4673      	mov	r3, lr
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	4661      	mov	r1, ip
 8000cca:	f000 fa7f 	bl	80011cc <write_max_screen>
		display_blocks_still_1[i] = 0;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <sdrop+0x1a0>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	54d1      	strb	r1, [r2, r3]
		display_blocks_still_2[i] = 0;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <sdrop+0x1ac>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	54d1      	strb	r1, [r2, r3]
		display_blocks_still_3[i] = 0;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <sdrop+0x1b8>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	54d1      	strb	r1, [r2, r3]
		display_blocks_still_4[i] = 0;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <sdrop+0x1c4>)
 8000cea:	2100      	movs	r1, #0
 8000cec:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_1[i] = 0;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a30      	ldr	r2, [pc, #192]	; (8000db4 <sdrop+0x1d0>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_2[i] = 0;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	4a2f      	ldr	r2, [pc, #188]	; (8000db8 <sdrop+0x1d4>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_3[i] = 0;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <sdrop+0x1d8>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_4[i] = 0;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <sdrop+0x1dc>)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_mem_1[i] = 0;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <sdrop+0x1a4>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_mem_2[i] = 0;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <sdrop+0x1b0>)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_mem_3[i] = 0;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <sdrop+0x1bc>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	54d1      	strb	r1, [r2, r3]
		display_blocks_mov_mem_4[i] = 0;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4a20      	ldr	r2, [pc, #128]	; (8000dac <sdrop+0x1c8>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	54d1      	strb	r1, [r2, r3]
		display_fin_1[i] = 0;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <sdrop+0x1a8>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	54d1      	strb	r1, [r2, r3]
		display_fin_2[i] = 0;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <sdrop+0x1b4>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	54d1      	strb	r1, [r2, r3]
		display_fin_3[i] = 0;
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <sdrop+0x1c0>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	54d1      	strb	r1, [r2, r3]
		display_fin_4[i] = 0;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <sdrop+0x1cc>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i=0;i<8;i++) {
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	3301      	adds	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	f67f af6d 	bls.w	8000c36 <sdrop+0x52>
    findGhost(board);
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f7ff fdf5 	bl	800094c <findGhost>
    if (board->ghostOffset == 0) {
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d107      	bne.n	8000d7c <sdrop+0x198>
      board->lD = 1;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
      board->timeToDrop = lockDelay;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2264      	movs	r2, #100	; 0x64
 8000d78:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	200000d0 	.word	0x200000d0
 8000d88:	20000110 	.word	0x20000110
 8000d8c:	20000130 	.word	0x20000130
 8000d90:	200000d8 	.word	0x200000d8
 8000d94:	20000118 	.word	0x20000118
 8000d98:	20000138 	.word	0x20000138
 8000d9c:	200000e0 	.word	0x200000e0
 8000da0:	20000120 	.word	0x20000120
 8000da4:	20000140 	.word	0x20000140
 8000da8:	200000e8 	.word	0x200000e8
 8000dac:	20000128 	.word	0x20000128
 8000db0:	20000148 	.word	0x20000148
 8000db4:	200000f0 	.word	0x200000f0
 8000db8:	200000f8 	.word	0x200000f8
 8000dbc:	20000100 	.word	0x20000100
 8000dc0:	20000108 	.word	0x20000108

08000dc4 <processKeys>:
  }

  return 0; // wall kick not possible
}

void processKeys(struct tetBoard *board) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
//      board->holdCooldown = 1;
//      // updateHold(board);
//    }
//  }

  if (board->timeToDrop <= 0) { // soft drop
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	dc0d      	bgt.n	8000df2 <processKeys+0x2e>
    board->timeToDrop = dropTime / board->level;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8000ddc:	2232      	movs	r2, #50	; 0x32
 8000dde:	fb92 f2f3 	sdiv	r2, r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    sdrop(1, board);
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fefa 	bl	8000be4 <sdrop>
  } else {
    board->timeToDrop--;
  }
}
 8000df0:	e006      	b.n	8000e00 <processKeys+0x3c>
    board->timeToDrop--;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8000df8:	1e5a      	subs	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <drawGame>:

void drawGame(struct tetBoard *board) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	for(int i=0;i<8;i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
 8000e14:	e002      	b.n	8000e1c <drawGame+0x14>
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	3301      	adds	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	ddf9      	ble.n	8000e16 <drawGame+0xe>
//  werase(board->gameWin); // clear screen

//  wattron(board->gameWin, COLOR_PAIR(8));
//  wborder(board->gameWin, '|', '|', '-', '-', '+', '+', '+', '+'); // ascii borders

  if (board->orderCount >= 7) {
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000e28:	2b06      	cmp	r3, #6
 8000e2a:	dd03      	ble.n	8000e34 <drawGame+0x2c>
    board->orderCount = 0;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  }


  for (int y = 0; y < len; y++) {
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	e06f      	b.n	8000f1a <drawGame+0x112>
    for (int x = 0; x < wid; x++) { // draw tetris pieces already placed on the board
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e066      	b.n	8000f0e <drawGame+0x106>
      if (board->grid[x][y] != 0) {
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	441a      	add	r2, r3
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d05a      	beq.n	8000f08 <drawGame+0x100>
//    	  display[y] |= (1u << x); /* XXX */

    	  if (y <= 7 && x >= 8){
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	dc14      	bgt.n	8000e82 <drawGame+0x7a>
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	dd11      	ble.n	8000e82 <drawGame+0x7a>
    		  display_blocks_still_1[y] |= (1u << (x-8));
 8000e5e:	4a7a      	ldr	r2, [pc, #488]	; (8001048 <drawGame+0x240>)
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	4413      	add	r3, r2
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b2d9      	uxtb	r1, r3
 8000e76:	4a74      	ldr	r2, [pc, #464]	; (8001048 <drawGame+0x240>)
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e042      	b.n	8000f08 <drawGame+0x100>
    	  }
    	  else if (y <= 7 && x <= 7){
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	dc13      	bgt.n	8000eb0 <drawGame+0xa8>
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	dc10      	bgt.n	8000eb0 <drawGame+0xa8>
    		  display_blocks_still_2[y] |= (1u << x);
 8000e8e:	4a6f      	ldr	r2, [pc, #444]	; (800104c <drawGame+0x244>)
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	4413      	add	r3, r2
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	2101      	movs	r1, #1
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b2d9      	uxtb	r1, r3
 8000ea4:	4a69      	ldr	r2, [pc, #420]	; (800104c <drawGame+0x244>)
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	460a      	mov	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e02b      	b.n	8000f08 <drawGame+0x100>
    	  }

    	  else if (y >= 8 && x >= 8){
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	dd13      	ble.n	8000ede <drawGame+0xd6>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b07      	cmp	r3, #7
 8000eba:	dd10      	ble.n	8000ede <drawGame+0xd6>
    		  display_blocks_still_3[y-8] |= (1u << (x-8));
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	3b08      	subs	r3, #8
 8000ec0:	4a63      	ldr	r2, [pc, #396]	; (8001050 <drawGame+0x248>)
 8000ec2:	5cd1      	ldrb	r1, [r2, r3]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3b08      	subs	r3, #8
 8000ec8:	2201      	movs	r2, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	3b08      	subs	r3, #8
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	b2d1      	uxtb	r1, r2
 8000ed8:	4a5d      	ldr	r2, [pc, #372]	; (8001050 <drawGame+0x248>)
 8000eda:	54d1      	strb	r1, [r2, r3]
 8000edc:	e014      	b.n	8000f08 <drawGame+0x100>
    	  }
    	  else if (y >= 8 && x <= 7){
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dd11      	ble.n	8000f08 <drawGame+0x100>
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	2b07      	cmp	r3, #7
 8000ee8:	dc0e      	bgt.n	8000f08 <drawGame+0x100>
    		  display_blocks_still_4[y-8] |= (1u << x);
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	3b08      	subs	r3, #8
 8000eee:	4a59      	ldr	r2, [pc, #356]	; (8001054 <drawGame+0x24c>)
 8000ef0:	5cd1      	ldrb	r1, [r2, r3]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	3b08      	subs	r3, #8
 8000f00:	430a      	orrs	r2, r1
 8000f02:	b2d1      	uxtb	r1, r2
 8000f04:	4a53      	ldr	r2, [pc, #332]	; (8001054 <drawGame+0x24c>)
 8000f06:	54d1      	strb	r1, [r2, r3]
    for (int x = 0; x < wid; x++) { // draw tetris pieces already placed on the board
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b0d      	cmp	r3, #13
 8000f12:	dd95      	ble.n	8000e40 <drawGame+0x38>
  for (int y = 0; y < len; y++) {
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	3301      	adds	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	dd8c      	ble.n	8000e3a <drawGame+0x32>
    	  }
      }
    }
  }

  getTetromino(board->dir, board->cur, board->blocks);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f32:	461a      	mov	r2, r3
 8000f34:	f7ff fbc8 	bl	80006c8 <getTetromino>
  //   }
  // }

  // wattron(board->gameWin, COLOR_PAIR(board->cur+1));

  for (int i = 0; i < 4; i++) { // draw current tetris piece
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	e0e0      	b.n	8001100 <drawGame+0x2f8>
//    if (board->blocks[i][1] + board->piece.y >= 0 || i == 3) {
	  for (int y = 0; y < len; y++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e0d6      	b.n	80010f2 <drawGame+0x2ea>
		for (int x = 0; x < wid; x++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	e077      	b.n	800103a <drawGame+0x232>
//			if (board->blocks[i][1] + board->piece.y + 1 == y && board->blocks[i][0] + board->piece.x + 1 == x){
			if (board->blocks[i][1] + board->piece.y + 1 == y && board->blocks[i][0] + board->piece.x == x){
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4413      	add	r3, r2
 8000f52:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3301      	adds	r3, #1
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d166      	bne.n	8001034 <drawGame+0x22c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	3225      	adds	r2, #37	; 0x25
 8000f6c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f76:	4413      	add	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d15a      	bne.n	8001034 <drawGame+0x22c>
//				display2[y] |= (1u << x); /* XXX */
			  if (y <= 7 && x >= 8){
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	dc14      	bgt.n	8000fae <drawGame+0x1a6>
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	dd11      	ble.n	8000fae <drawGame+0x1a6>
				  display_blocks_mov_1[y] |= (1u << (x-8));
 8000f8a:	4a33      	ldr	r2, [pc, #204]	; (8001058 <drawGame+0x250>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	3b08      	subs	r3, #8
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b2d9      	uxtb	r1, r3
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <drawGame+0x250>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	460a      	mov	r2, r1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e042      	b.n	8001034 <drawGame+0x22c>
			  }
			  else if (y <= 7 && x <= 7){
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	dc13      	bgt.n	8000fdc <drawGame+0x1d4>
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dc10      	bgt.n	8000fdc <drawGame+0x1d4>
				  display_blocks_mov_2[y] |= (1u << x);
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <drawGame+0x254>)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b2d9      	uxtb	r1, r3
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <drawGame+0x254>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e02b      	b.n	8001034 <drawGame+0x22c>
			  }

			  else if (y >= 8 && x >= 8){
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	dd13      	ble.n	800100a <drawGame+0x202>
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	dd10      	ble.n	800100a <drawGame+0x202>
				  display_blocks_mov_3[y-8] |= (1u << (x-8));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3b08      	subs	r3, #8
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <drawGame+0x258>)
 8000fee:	5cd1      	ldrb	r1, [r2, r3]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3b08      	subs	r3, #8
 8001000:	430a      	orrs	r2, r1
 8001002:	b2d1      	uxtb	r1, r2
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <drawGame+0x258>)
 8001006:	54d1      	strb	r1, [r2, r3]
 8001008:	e014      	b.n	8001034 <drawGame+0x22c>
			  }
			  else if (y >= 8 && x <= 7){
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b07      	cmp	r3, #7
 800100e:	dd11      	ble.n	8001034 <drawGame+0x22c>
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	2b07      	cmp	r3, #7
 8001014:	dc0e      	bgt.n	8001034 <drawGame+0x22c>
				  display_blocks_mov_4[y-8] |= (1u << x);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3b08      	subs	r3, #8
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <drawGame+0x25c>)
 800101c:	5cd1      	ldrb	r1, [r2, r3]
 800101e:	2201      	movs	r2, #1
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	b2da      	uxtb	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3b08      	subs	r3, #8
 800102c:	430a      	orrs	r2, r1
 800102e:	b2d1      	uxtb	r1, r2
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <drawGame+0x25c>)
 8001032:	54d1      	strb	r1, [r2, r3]
		for (int x = 0; x < wid; x++) {
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3301      	adds	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b0d      	cmp	r3, #13
 800103e:	dd84      	ble.n	8000f4a <drawGame+0x142>
			  }
            }
		}
	  for(int i=0;i<8;i++) {
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e04f      	b.n	80010e6 <drawGame+0x2de>
 8001046:	bf00      	nop
 8001048:	200000d0 	.word	0x200000d0
 800104c:	200000d8 	.word	0x200000d8
 8001050:	200000e0 	.word	0x200000e0
 8001054:	200000e8 	.word	0x200000e8
 8001058:	200000f0 	.word	0x200000f0
 800105c:	200000f8 	.word	0x200000f8
 8001060:	20000100 	.word	0x20000100
 8001064:	20000108 	.word	0x20000108
//		  display_2_mem[i] = display_2_mem[i] | display2[i]; /* XXX */
		  display_blocks_mov_mem_1[i] = display_blocks_mov_mem_1[i] | display_blocks_mov_1[i];
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <drawGame+0x30c>)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	4929      	ldr	r1, [pc, #164]	; (8001118 <drawGame+0x310>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	440b      	add	r3, r1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	b2d9      	uxtb	r1, r3
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <drawGame+0x30c>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	460a      	mov	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
		  display_blocks_mov_mem_2[i] = display_blocks_mov_mem_2[i] | display_blocks_mov_2[i];
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <drawGame+0x314>)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	4924      	ldr	r1, [pc, #144]	; (8001120 <drawGame+0x318>)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	440b      	add	r3, r1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <drawGame+0x314>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	460a      	mov	r2, r1
 80010a2:	701a      	strb	r2, [r3, #0]
		  display_blocks_mov_mem_3[i] = display_blocks_mov_mem_3[i] | display_blocks_mov_3[i];
 80010a4:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <drawGame+0x31c>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	491e      	ldr	r1, [pc, #120]	; (8001128 <drawGame+0x320>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	440b      	add	r3, r1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b2d9      	uxtb	r1, r3
 80010b8:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <drawGame+0x31c>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	460a      	mov	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
		  display_blocks_mov_mem_4[i] = display_blocks_mov_mem_4[i] | display_blocks_mov_4[i];
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <drawGame+0x324>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	4919      	ldr	r1, [pc, #100]	; (8001130 <drawGame+0x328>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	440b      	add	r3, r1
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2d9      	uxtb	r1, r3
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <drawGame+0x324>)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<8;i++) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	ddbd      	ble.n	8001068 <drawGame+0x260>
	  for (int y = 0; y < len; y++) {
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	f77f af25 	ble.w	8000f44 <drawGame+0x13c>
  for (int i = 0; i < 4; i++) { // draw current tetris piece
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2b03      	cmp	r3, #3
 8001104:	f77f af1b 	ble.w	8000f3e <drawGame+0x136>
		}
      }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000110 	.word	0x20000110
 8001118:	200000f0 	.word	0x200000f0
 800111c:	20000118 	.word	0x20000118
 8001120:	200000f8 	.word	0x200000f8
 8001124:	20000120 	.word	0x20000120
 8001128:	20000100 	.word	0x20000100
 800112c:	20000128 	.word	0x20000128
 8001130:	20000108 	.word	0x20000108

08001134 <write_byte>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void write_byte (uint8_t byte)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e018      	b.n	8001176 <write_byte+0x42>
	{
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 0);  // pull the clock pin low
 8001144:	2200      	movs	r2, #0
 8001146:	2120      	movs	r1, #32
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <write_byte+0x54>)
 800114a:	f000 fec5 	bl	8001ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, byte&0x80);  // write the MSB bit to the data pin
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	480b      	ldr	r0, [pc, #44]	; (8001188 <write_byte+0x54>)
 800115c:	f000 febc 	bl	8001ed8 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);  // pull the clock pin HIGH
 8001166:	2201      	movs	r2, #1
 8001168:	2120      	movs	r1, #32
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <write_byte+0x54>)
 800116c:	f000 feb4 	bl	8001ed8 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b07      	cmp	r3, #7
 800117a:	dde3      	ble.n	8001144 <write_byte+0x10>
	}
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <write_max>:

void write_max (uint8_t address, uint8_t data)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 0);  // pull the CS pin LOW
 800119c:	2200      	movs	r2, #0
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <write_max+0x3c>)
 80011a2:	f000 fe99 	bl	8001ed8 <HAL_GPIO_WritePin>
	write_byte (address);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ffc3 	bl	8001134 <write_byte>
	write_byte (data);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffbf 	bl	8001134 <write_byte>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 1);  // pull the CS pin HIGH
 80011b6:	2201      	movs	r2, #1
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4803      	ldr	r0, [pc, #12]	; (80011c8 <write_max+0x3c>)
 80011bc:	f000 fe8c 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020000 	.word	0x40020000

080011cc <write_max_screen>:

void write_max_screen (uint8_t address1, uint8_t data1, uint8_t address2, uint8_t data2, uint8_t address3, uint8_t data3, uint8_t address4, uint8_t data4)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4604      	mov	r4, r0
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4623      	mov	r3, r4
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	4603      	mov	r3, r0
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	460b      	mov	r3, r1
 80011e4:	717b      	strb	r3, [r7, #5]
 80011e6:	4613      	mov	r3, r2
 80011e8:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 0);  // pull the CS pin LOW
 80011ea:	2200      	movs	r2, #0
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <write_max_screen+0x80>)
 80011f0:	f000 fe72 	bl	8001ed8 <HAL_GPIO_WritePin>
	write_byte (address1);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff9c 	bl	8001134 <write_byte>
	write_byte (data1);
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff98 	bl	8001134 <write_byte>
	write_byte (address2);
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff94 	bl	8001134 <write_byte>
	write_byte (data2);
 800120c:	793b      	ldrb	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff90 	bl	8001134 <write_byte>
	write_byte (address3);
 8001214:	7e3b      	ldrb	r3, [r7, #24]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff8c 	bl	8001134 <write_byte>
	write_byte (data3);
 800121c:	7f3b      	ldrb	r3, [r7, #28]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff88 	bl	8001134 <write_byte>
	write_byte (address4);
 8001224:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff83 	bl	8001134 <write_byte>
	write_byte (data4);
 800122e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff7e 	bl	8001134 <write_byte>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, 1);  // pull the CS pin HIGH
 8001238:	2201      	movs	r2, #1
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <write_max_screen+0x80>)
 800123e:	f000 fe4b 	bl	8001ed8 <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	bf00      	nop
 800124c:	40020000 	.word	0x40020000

08001250 <max_init>:

// function for init

void max_init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
 write_max(0x09, 0x00);       //  no decoding
 8001254:	2100      	movs	r1, #0
 8001256:	2009      	movs	r0, #9
 8001258:	f7ff ff98 	bl	800118c <write_max>
 write_max(0x0a, 0x00);       //  brightness intensity
 800125c:	2100      	movs	r1, #0
 800125e:	200a      	movs	r0, #10
 8001260:	f7ff ff94 	bl	800118c <write_max>
 write_max(0x0b, 0x07);       //  scan limit = 8 LEDs
 8001264:	2107      	movs	r1, #7
 8001266:	200b      	movs	r0, #11
 8001268:	f7ff ff90 	bl	800118c <write_max>
 write_max(0x0c, 0x01);       //  power down =0,normal mode = 1
 800126c:	2101      	movs	r1, #1
 800126e:	200c      	movs	r0, #12
 8001270:	f7ff ff8c 	bl	800118c <write_max>
 write_max(0x0f, 0x00);       //  no test display
 8001274:	2100      	movs	r1, #0
 8001276:	200f      	movs	r0, #15
 8001278:	f7ff ff88 	bl	800118c <write_max>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0e2      	sub	sp, #392	; 0x188
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f000 fb27 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f883 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 f913 	bl	80014b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001292:	f000 f8e7 	bl	8001464 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  max_init ();
 8001296:	f7ff ffdb 	bl	8001250 <max_init>
  struct tetBoard tetris = newBoard();
 800129a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800129e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f96e 	bl	8000584 <newBoard>
//  if (w < wid + 13 || (h < len + 2 || h < nextLen * 4 + 2)) {
//    printCenter("Screen too small!", -1);
//    printCenter("Press any key to quit", 1);
////    getch(); // wait for input
//  } else {
    srand(time(0)); // init random
 80012a8:	2000      	movs	r0, #0
 80012aa:	f001 fe55 	bl	8002f58 <time>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4613      	mov	r3, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fdc3 	bl	8002e40 <srand>
//    tetris.nextWin = newwin(nextLen * 4 + 4, 6, (h-len) / 2 - 1, (w+wid) / 2 + 3);
    // tetris.holdWin = newwin(10, 6, (h-len) / 2, (w-wid) / 2 - 8);
    // tetris.statsWin = newwin(8, 7, (h+len) / 2 - 6, (w-wid) / 2 - 8);
    // tetris.lineClearWin = newwin(1, w, ((h-len) / 2) + len + 3, 1);

    tetris.timeToDrop = dropTime / tetris.level;
 80012ba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012be:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80012c2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80012c6:	2232      	movs	r2, #50	; 0x32
 80012c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80012cc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80012d4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    shuffle(tetris.order, 7); // shuffle order
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	33f8      	adds	r3, #248	; 0xf8
 80012de:	2107      	movs	r1, #7
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f9b3 	bl	800064c <shuffle>

    for (int i = 0; i < nextLen; i++) { // fill next array
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80012ec:	e013      	b.n	8001316 <main+0x96>
      tetris.next[i] = popBag(&tetris);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fad8 	bl	80008a8 <popBag>
 80012f8:	4601      	mov	r1, r0
 80012fa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012fe:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001302:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001306:	3238      	adds	r2, #56	; 0x38
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < nextLen; i++) { // fill next array
 800130c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001310:	3301      	adds	r3, #1
 8001312:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001316:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800131a:	2b05      	cmp	r3, #5
 800131c:	dde7      	ble.n	80012ee <main+0x6e>
    }

    tetris.piece.x = wid / 2 - 1; // init x position
 800131e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001322:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001326:	2206      	movs	r2, #6
 8001328:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    // updateStats(&tetris);
    // updateNext(&tetris);

    // wattron(tetris.gameWin, COLOR_PAIR(8)); // default colors

    for (int i = secondsToStart; i > 0; i--) { // countdown
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001332:	e00f      	b.n	8001354 <main+0xd4>
      char num[wid]; // for whatever reason, cannot have length of 1.
      sprintf(num, "%d", i); // format number
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800133a:	4915      	ldr	r1, [pc, #84]	; (8001390 <main+0x110>)
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fdeb 	bl	8002f18 <siprintf>
//      wborder(tetris.gameWin, '|', '|', '-', '-', '+', '+', '+', '+'); // ascii borders
//      wprintCenter(tetris.gameWin, num, 0);
//      wmove(tetris.gameWin, 0, 0);
//      wrefresh(tetris.gameWin);
//      sleep(1);
      HAL_Delay(1000);
 8001342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001346:	f000 fb39 	bl	80019bc <HAL_Delay>
    for (int i = secondsToStart; i > 0; i--) { // countdown
 800134a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800134e:	3b01      	subs	r3, #1
 8001350:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001354:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001358:	2b00      	cmp	r3, #0
 800135a:	dceb      	bgt.n	8001334 <main+0xb4>
//    sleep(1);
//    HAL_Delay(1000);

//    while (getch() != -1) {} // clear input

    tetris.cur = popNext(&tetris); // get current tetromino
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fac8 	bl	80008f6 <popNext>
 8001366:	4602      	mov	r2, r0
 8001368:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800136c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001370:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      processKeys(&tetris);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fd23 	bl	8000dc4 <processKeys>

      drawGame(&tetris);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fd40 	bl	8000e08 <drawGame>

//      usleep(1);
      HAL_Delay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f000 fb17 	bl	80019bc <HAL_Delay>
      processKeys(&tetris);
 800138e:	e7f1      	b.n	8001374 <main+0xf4>
 8001390:	08004328 	.word	0x08004328

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2230      	movs	r2, #48	; 0x30
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fd44 	bl	8002e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a26      	ldr	r2, [pc, #152]	; (800145c <SystemClock_Config+0xc8>)
 80013c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <SystemClock_Config+0xc8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <SystemClock_Config+0xcc>)
 80013de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <SystemClock_Config+0xcc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001404:	2304      	movs	r3, #4
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001408:	2348      	movs	r3, #72	; 0x48
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001410:	2304      	movs	r3, #4
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fd77 	bl	8001f0c <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001424:	f000 f8b6 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2102      	movs	r1, #2
 8001444:	4618      	mov	r0, r3
 8001446:	f000 ffd9 	bl	80023fc <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001450:	f000 f8a0 	bl	8001594 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_USART2_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800149c:	f001 f9ce 	bl	800283c <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f000 f875 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000008c 	.word	0x2000008c
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a2c      	ldr	r2, [pc, #176]	; (8001588 <MX_GPIO_Init+0xd0>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a25      	ldr	r2, [pc, #148]	; (8001588 <MX_GPIO_Init+0xd0>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_GPIO_Init+0xd0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <MX_GPIO_Init+0xd0>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_GPIO_Init+0xd0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <MX_GPIO_Init+0xd0>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_GPIO_Init+0xd0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLOCK_Pin|CS_Pin|DATA_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	21e0      	movs	r1, #224	; 0xe0
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <MX_GPIO_Init+0xd4>)
 8001544:	f000 fcc8 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_GPIO_Init+0xd8>)
 8001560:	f000 fb36 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLOCK_Pin CS_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLOCK_Pin|CS_Pin|DATA_Pin;
 8001564:	23e0      	movs	r3, #224	; 0xe0
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0xd4>)
 800157c:	f000 fb28 	bl	8001bd0 <HAL_GPIO_Init>

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020800 	.word	0x40020800

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>
	...

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_MspInit+0x4c>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_MspInit+0x4c>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015de:	2007      	movs	r0, #7
 80015e0:	f000 fac2 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_UART_MspInit+0x84>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12b      	bne.n	800166a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_UART_MspInit+0x88>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800164a:	230c      	movs	r3, #12
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165a:	2307      	movs	r3, #7
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <HAL_UART_MspInit+0x8c>)
 8001666:	f000 fab3 	bl	8001bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f956 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ee:	f001 fb67 	bl	8002dc0 <__errno>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2216      	movs	r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_exit>:

void _exit (int status)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800170c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001716:	e7fe      	b.n	8001716 <_exit+0x12>

08001718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e00a      	b.n	8001740 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172a:	f3af 8000 	nop.w
 800172e:	4601      	mov	r1, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf0      	blt.n	800172a <_read+0x12>
  }

  return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf1      	blt.n	8001764 <_write+0x12>
  }
  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f001 facc 	bl	8002dc0 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000150 	.word	0x20000150
 800185c:	20000168 	.word	0x20000168

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f001 fa8b 	bl	8002dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff fce3 	bl	8001280 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c8:	0800454c 	.word	0x0800454c
  ldr r2, =_sbss
 80018cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d0:	20000168 	.word	0x20000168

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f931 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fe48 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f93b 	bl	8001bb6 <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001958:	f000 f911 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	20000008 	.word	0x20000008
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000154 	.word	0x20000154

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000154 	.word	0x20000154

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff47 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff5c 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffb0 	bl	8001b24 <SysTick_Config>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e159      	b.n	8001ea0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	f040 8148 	bne.w	8001e9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d005      	beq.n	8001c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d130      	bne.n	8001c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 0201 	and.w	r2, r3, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d017      	beq.n	8001cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d123      	bne.n	8001d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	69b9      	ldr	r1, [r7, #24]
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a2 	beq.w	8001e9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <HAL_GPIO_Init+0x2e8>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <HAL_GPIO_Init+0x2e8>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_GPIO_Init+0x2e8>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d72:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_GPIO_Init+0x2ec>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a49      	ldr	r2, [pc, #292]	; (8001ec0 <HAL_GPIO_Init+0x2f0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x202>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a48      	ldr	r2, [pc, #288]	; (8001ec4 <HAL_GPIO_Init+0x2f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x1fe>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <HAL_GPIO_Init+0x2f8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x1fa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <HAL_GPIO_Init+0x2fc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x1f6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a45      	ldr	r2, [pc, #276]	; (8001ed0 <HAL_GPIO_Init+0x300>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x1f2>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x204>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_GPIO_Init+0x2ec>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_GPIO_Init+0x304>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f aea2 	bls.w	8001bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e267      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d075      	beq.n	8002016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d00c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b85      	ldr	r3, [pc, #532]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d05b      	beq.n	8002014 <HAL_RCC_OscConfig+0x108>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d157      	bne.n	8002014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e242      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x74>
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e01d      	b.n	8001fbc <HAL_RCC_OscConfig+0xb0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x98>
 8001f8a:	4b70      	ldr	r3, [pc, #448]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6f      	ldr	r2, [pc, #444]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6c      	ldr	r2, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0xb0>
 8001fa4:	4b69      	ldr	r3, [pc, #420]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a68      	ldr	r2, [pc, #416]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b66      	ldr	r3, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fcee 	bl	80019a4 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fcea 	bl	80019a4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e207      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0xc0>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fcda 	bl	80019a4 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fcd6 	bl	80019a4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1f3      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	4b51      	ldr	r3, [pc, #324]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xe8>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002022:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002036:	2b08      	cmp	r3, #8
 8002038:	d11c      	bne.n	8002074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_RCC_OscConfig+0x240>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x152>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1c7      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4937      	ldr	r1, [pc, #220]	; (800214c <HAL_RCC_OscConfig+0x240>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	e03a      	b.n	80020ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x244>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff fc8f 	bl	80019a4 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff fc8b 	bl	80019a4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1a8      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4925      	ldr	r1, [pc, #148]	; (800214c <HAL_RCC_OscConfig+0x240>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x244>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fc6e 	bl	80019a4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff fc6a 	bl	80019a4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e187      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d036      	beq.n	8002164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_RCC_OscConfig+0x248>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff fc4e 	bl	80019a4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff fc4a 	bl	80019a4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e167      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x200>
 800212a:	e01b      	b.n	8002164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_OscConfig+0x248>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7ff fc37 	bl	80019a4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	e00e      	b.n	8002158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7ff fc33 	bl	80019a4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d907      	bls.n	8002158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e150      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
 800214c:	40023800 	.word	0x40023800
 8002150:	42470000 	.word	0x42470000
 8002154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ea      	bne.n	800213a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8097 	beq.w	80022a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b81      	ldr	r3, [pc, #516]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b7d      	ldr	r3, [pc, #500]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a7c      	ldr	r2, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b7a      	ldr	r3, [pc, #488]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b77      	ldr	r3, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a73      	ldr	r2, [pc, #460]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fbf3 	bl	80019a4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7ff fbef 	bl	80019a4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e10c      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2ea>
 80021e8:	4b64      	ldr	r3, [pc, #400]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
 80021f4:	e01c      	b.n	8002230 <HAL_RCC_OscConfig+0x324>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x30c>
 80021fe:	4b5f      	ldr	r3, [pc, #380]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a5e      	ldr	r2, [pc, #376]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	4b5c      	ldr	r3, [pc, #368]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a5b      	ldr	r2, [pc, #364]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x324>
 8002218:	4b58      	ldr	r3, [pc, #352]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a54      	ldr	r2, [pc, #336]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff fbb4 	bl	80019a4 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7ff fbb0 	bl	80019a4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0cb      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002256:	4b49      	ldr	r3, [pc, #292]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ee      	beq.n	8002240 <HAL_RCC_OscConfig+0x334>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff fb9e 	bl	80019a4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff fb9a 	bl	80019a4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0b5      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ee      	bne.n	800226c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a38      	ldr	r2, [pc, #224]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a1 	beq.w	80023ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d05c      	beq.n	8002370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d141      	bne.n	8002342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x478>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fb6e 	bl	80019a4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff fb6a 	bl	80019a4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e087      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	3b01      	subs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	491b      	ldr	r1, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x478>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fb43 	bl	80019a4 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff fb3f 	bl	80019a4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e05c      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x416>
 8002340:	e054      	b.n	80023ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x478>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fb2c 	bl	80019a4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff fb28 	bl	80019a4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e045      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x444>
 800236e:	e03d      	b.n	80023ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e038      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
 800237c:	40023800 	.word	0x40023800
 8002380:	40007000 	.word	0x40007000
 8002384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x4ec>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d028      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d11a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d111      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0cc      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d90c      	bls.n	8002438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d044      	beq.n	800251c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d119      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e067      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 0203 	bic.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4934      	ldr	r1, [pc, #208]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ec:	f7ff fa5a 	bl	80019a4 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	e00a      	b.n	800250a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7ff fa56 	bl	80019a4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 020c 	and.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1eb      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20c      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f9ba 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00
 80025b8:	40023800 	.word	0x40023800
 80025bc:	080043dc 	.word	0x080043dc
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b094      	sub	sp, #80	; 0x50
 80025ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	647b      	str	r3, [r7, #68]	; 0x44
 80025d4:	2300      	movs	r3, #0
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d8:	2300      	movs	r3, #0
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e0:	4b79      	ldr	r3, [pc, #484]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d00d      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x40>
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	f200 80e1 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x34>
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fa:	e0db      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_GetSysClockFreq+0x204>)
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002600:	e0db      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002602:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002606:	e0d8      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002610:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
 8002628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
 8002636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	0159      	lsls	r1, r3, #5
 8002648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264c:	0150      	lsls	r0, r2, #5
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4621      	mov	r1, r4
 8002654:	1a51      	subs	r1, r2, r1
 8002656:	6139      	str	r1, [r7, #16]
 8002658:	4629      	mov	r1, r5
 800265a:	eb63 0301 	sbc.w	r3, r3, r1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800266c:	4659      	mov	r1, fp
 800266e:	018b      	lsls	r3, r1, #6
 8002670:	4651      	mov	r1, sl
 8002672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002676:	4651      	mov	r1, sl
 8002678:	018a      	lsls	r2, r1, #6
 800267a:	4651      	mov	r1, sl
 800267c:	ebb2 0801 	subs.w	r8, r2, r1
 8002680:	4659      	mov	r1, fp
 8002682:	eb63 0901 	sbc.w	r9, r3, r1
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800269a:	4690      	mov	r8, r2
 800269c:	4699      	mov	r9, r3
 800269e:	4623      	mov	r3, r4
 80026a0:	eb18 0303 	adds.w	r3, r8, r3
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	462b      	mov	r3, r5
 80026a8:	eb49 0303 	adc.w	r3, r9, r3
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ba:	4629      	mov	r1, r5
 80026bc:	024b      	lsls	r3, r1, #9
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c4:	4621      	mov	r1, r4
 80026c6:	024a      	lsls	r2, r1, #9
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ce:	2200      	movs	r2, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026d8:	f7fd fdd2 	bl	8000280 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e4:	e058      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	2200      	movs	r2, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	4611      	mov	r1, r2
 80026f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	0159      	lsls	r1, r3, #5
 800270e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002712:	0150      	lsls	r0, r2, #5
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4641      	mov	r1, r8
 800271a:	ebb2 0a01 	subs.w	sl, r2, r1
 800271e:	4649      	mov	r1, r9
 8002720:	eb63 0b01 	sbc.w	fp, r3, r1
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002738:	ebb2 040a 	subs.w	r4, r2, sl
 800273c:	eb63 050b 	sbc.w	r5, r3, fp
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	00eb      	lsls	r3, r5, #3
 800274a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274e:	00e2      	lsls	r2, r4, #3
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	4643      	mov	r3, r8
 8002756:	18e3      	adds	r3, r4, r3
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	464b      	mov	r3, r9
 800275c:	eb45 0303 	adc.w	r3, r5, r3
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276e:	4629      	mov	r1, r5
 8002770:	028b      	lsls	r3, r1, #10
 8002772:	4621      	mov	r1, r4
 8002774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002778:	4621      	mov	r1, r4
 800277a:	028a      	lsls	r2, r1, #10
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002782:	2200      	movs	r2, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	61fa      	str	r2, [r7, #28]
 8002788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278c:	f7fd fd78 	bl	8000280 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	3301      	adds	r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetSysClockFreq+0x204>)
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3750      	adds	r7, #80	; 0x50
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	007a1200 	.word	0x007a1200

080027d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027f0:	f7ff fff0 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	080043ec 	.word	0x080043ec

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002818:	f7ff ffdc 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0b5b      	lsrs	r3, r3, #13
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	080043ec 	.word	0x080043ec

0800283c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e03f      	b.n	80028ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fec4 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f829 	bl	80028d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b0c0      	sub	sp, #256	; 0x100
 80028de:	af00      	add	r7, sp, #0
 80028e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	68d9      	ldr	r1, [r3, #12]
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	ea40 0301 	orr.w	r3, r0, r1
 8002900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	431a      	orrs	r2, r3
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	431a      	orrs	r2, r3
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002930:	f021 010c 	bic.w	r1, r1, #12
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800293e:	430b      	orrs	r3, r1
 8002940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002952:	6999      	ldr	r1, [r3, #24]
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	ea40 0301 	orr.w	r3, r0, r1
 800295e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b8f      	ldr	r3, [pc, #572]	; (8002ba4 <UART_SetConfig+0x2cc>)
 8002968:	429a      	cmp	r2, r3
 800296a:	d005      	beq.n	8002978 <UART_SetConfig+0xa0>
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <UART_SetConfig+0x2d0>)
 8002974:	429a      	cmp	r2, r3
 8002976:	d104      	bne.n	8002982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002978:	f7ff ff4c 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 800297c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002980:	e003      	b.n	800298a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002982:	f7ff ff33 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8002986:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002994:	f040 810c 	bne.w	8002bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029aa:	4622      	mov	r2, r4
 80029ac:	462b      	mov	r3, r5
 80029ae:	1891      	adds	r1, r2, r2
 80029b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80029b2:	415b      	adcs	r3, r3
 80029b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029ba:	4621      	mov	r1, r4
 80029bc:	eb12 0801 	adds.w	r8, r2, r1
 80029c0:	4629      	mov	r1, r5
 80029c2:	eb43 0901 	adc.w	r9, r3, r1
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029da:	4690      	mov	r8, r2
 80029dc:	4699      	mov	r9, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	eb18 0303 	adds.w	r3, r8, r3
 80029e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029e8:	462b      	mov	r3, r5
 80029ea:	eb49 0303 	adc.w	r3, r9, r3
 80029ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a06:	460b      	mov	r3, r1
 8002a08:	18db      	adds	r3, r3, r3
 8002a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	eb42 0303 	adc.w	r3, r2, r3
 8002a12:	657b      	str	r3, [r7, #84]	; 0x54
 8002a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a1c:	f7fd fc30 	bl	8000280 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b61      	ldr	r3, [pc, #388]	; (8002bac <UART_SetConfig+0x2d4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	011c      	lsls	r4, r3, #4
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a50:	4641      	mov	r1, r8
 8002a52:	eb12 0a01 	adds.w	sl, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb43 0b01 	adc.w	fp, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a70:	4692      	mov	sl, r2
 8002a72:	469b      	mov	fp, r3
 8002a74:	4643      	mov	r3, r8
 8002a76:	eb1a 0303 	adds.w	r3, sl, r3
 8002a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	eb4b 0303 	adc.w	r3, fp, r3
 8002a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	18db      	adds	r3, r3, r3
 8002aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	eb42 0303 	adc.w	r3, r2, r3
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ab2:	f7fd fbe5 	bl	8000280 <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4611      	mov	r1, r2
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <UART_SetConfig+0x2d4>)
 8002abe:	fba3 2301 	umull	r2, r3, r3, r1
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2264      	movs	r2, #100	; 0x64
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <UART_SetConfig+0x2d4>)
 8002ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ae0:	441c      	add	r4, r3
 8002ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002afc:	415b      	adcs	r3, r3
 8002afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b04:	4641      	mov	r1, r8
 8002b06:	1851      	adds	r1, r2, r1
 8002b08:	6339      	str	r1, [r7, #48]	; 0x30
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	414b      	adcs	r3, r1
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	00cb      	lsls	r3, r1, #3
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b26:	4651      	mov	r1, sl
 8002b28:	00ca      	lsls	r2, r1, #3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4642      	mov	r2, r8
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b38:	464b      	mov	r3, r9
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	eb42 0303 	adc.w	r3, r2, r3
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b58:	460b      	mov	r3, r1
 8002b5a:	18db      	adds	r3, r3, r3
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	4613      	mov	r3, r2
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b6e:	f7fd fb87 	bl	8000280 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <UART_SetConfig+0x2d4>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2164      	movs	r1, #100	; 0x64
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	3332      	adds	r3, #50	; 0x32
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <UART_SetConfig+0x2d4>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	f003 0207 	and.w	r2, r3, #7
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4422      	add	r2, r4
 8002b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba0:	e105      	b.n	8002dae <UART_SetConfig+0x4d6>
 8002ba2:	bf00      	nop
 8002ba4:	40011000 	.word	0x40011000
 8002ba8:	40011400 	.word	0x40011400
 8002bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	1891      	adds	r1, r2, r2
 8002bc8:	6239      	str	r1, [r7, #32]
 8002bca:	415b      	adcs	r3, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bd2:	4641      	mov	r1, r8
 8002bd4:	1854      	adds	r4, r2, r1
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	eb43 0501 	adc.w	r5, r3, r1
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	00eb      	lsls	r3, r5, #3
 8002be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bea:	00e2      	lsls	r2, r4, #3
 8002bec:	4614      	mov	r4, r2
 8002bee:	461d      	mov	r5, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	18e3      	adds	r3, r4, r3
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	eb45 0303 	adc.w	r3, r5, r3
 8002bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c1e:	4629      	mov	r1, r5
 8002c20:	008b      	lsls	r3, r1, #2
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c28:	4621      	mov	r1, r4
 8002c2a:	008a      	lsls	r2, r1, #2
 8002c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c30:	f7fd fb26 	bl	8000280 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	011c      	lsls	r4, r3, #4
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	61b9      	str	r1, [r7, #24]
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6139      	str	r1, [r7, #16]
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	008b      	lsls	r3, r1, #2
 8002cc0:	4641      	mov	r1, r8
 8002cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	008a      	lsls	r2, r1, #2
 8002cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cce:	f7fd fad7 	bl	8000280 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	3332      	adds	r3, #50	; 0x32
 8002cea:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf6:	441c      	add	r4, r3
 8002cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8002d00:	677a      	str	r2, [r7, #116]	; 0x74
 8002d02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d06:	4642      	mov	r2, r8
 8002d08:	464b      	mov	r3, r9
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d16:	4641      	mov	r1, r8
 8002d18:	1851      	adds	r1, r2, r1
 8002d1a:	6039      	str	r1, [r7, #0]
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	414b      	adcs	r3, r1
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d2e:	4659      	mov	r1, fp
 8002d30:	00cb      	lsls	r3, r1, #3
 8002d32:	4651      	mov	r1, sl
 8002d34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d38:	4651      	mov	r1, sl
 8002d3a:	00ca      	lsls	r2, r1, #3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	4642      	mov	r2, r8
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d48:	464b      	mov	r3, r9
 8002d4a:	460a      	mov	r2, r1
 8002d4c:	eb42 0303 	adc.w	r3, r2, r3
 8002d50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5c:	667a      	str	r2, [r7, #100]	; 0x64
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	008b      	lsls	r3, r1, #2
 8002d6e:	4641      	mov	r1, r8
 8002d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d74:	4641      	mov	r1, r8
 8002d76:	008a      	lsls	r2, r1, #2
 8002d78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d7c:	f7fd fa80 	bl	8000280 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002d86:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2164      	movs	r1, #100	; 0x64
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <UART_SetConfig+0x4e4>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4422      	add	r2, r4
 8002dac:	609a      	str	r2, [r3, #8]
}
 8002dae:	bf00      	nop
 8002db0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	51eb851f 	.word	0x51eb851f

08002dc0 <__errno>:
 8002dc0:	4b01      	ldr	r3, [pc, #4]	; (8002dc8 <__errno+0x8>)
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <__libc_init_array>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	4d0d      	ldr	r5, [pc, #52]	; (8002e04 <__libc_init_array+0x38>)
 8002dd0:	4c0d      	ldr	r4, [pc, #52]	; (8002e08 <__libc_init_array+0x3c>)
 8002dd2:	1b64      	subs	r4, r4, r5
 8002dd4:	10a4      	asrs	r4, r4, #2
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	42a6      	cmp	r6, r4
 8002dda:	d109      	bne.n	8002df0 <__libc_init_array+0x24>
 8002ddc:	4d0b      	ldr	r5, [pc, #44]	; (8002e0c <__libc_init_array+0x40>)
 8002dde:	4c0c      	ldr	r4, [pc, #48]	; (8002e10 <__libc_init_array+0x44>)
 8002de0:	f001 fa96 	bl	8004310 <_init>
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	2600      	movs	r6, #0
 8002dea:	42a6      	cmp	r6, r4
 8002dec:	d105      	bne.n	8002dfa <__libc_init_array+0x2e>
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df4:	4798      	blx	r3
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ee      	b.n	8002dd8 <__libc_init_array+0xc>
 8002dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfe:	4798      	blx	r3
 8002e00:	3601      	adds	r6, #1
 8002e02:	e7f2      	b.n	8002dea <__libc_init_array+0x1e>
 8002e04:	08004544 	.word	0x08004544
 8002e08:	08004544 	.word	0x08004544
 8002e0c:	08004544 	.word	0x08004544
 8002e10:	08004548 	.word	0x08004548

08002e14 <memcpy>:
 8002e14:	440a      	add	r2, r1
 8002e16:	4291      	cmp	r1, r2
 8002e18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002e1c:	d100      	bne.n	8002e20 <memcpy+0xc>
 8002e1e:	4770      	bx	lr
 8002e20:	b510      	push	{r4, lr}
 8002e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e2a:	4291      	cmp	r1, r2
 8002e2c:	d1f9      	bne.n	8002e22 <memcpy+0xe>
 8002e2e:	bd10      	pop	{r4, pc}

08002e30 <memset>:
 8002e30:	4402      	add	r2, r0
 8002e32:	4603      	mov	r3, r0
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memset+0xa>
 8002e38:	4770      	bx	lr
 8002e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3e:	e7f9      	b.n	8002e34 <memset+0x4>

08002e40 <srand>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <srand+0x44>)
 8002e44:	681d      	ldr	r5, [r3, #0]
 8002e46:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e48:	4604      	mov	r4, r0
 8002e4a:	b9b3      	cbnz	r3, 8002e7a <srand+0x3a>
 8002e4c:	2018      	movs	r0, #24
 8002e4e:	f000 f8df 	bl	8003010 <malloc>
 8002e52:	4602      	mov	r2, r0
 8002e54:	63a8      	str	r0, [r5, #56]	; 0x38
 8002e56:	b920      	cbnz	r0, 8002e62 <srand+0x22>
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <srand+0x48>)
 8002e5a:	480c      	ldr	r0, [pc, #48]	; (8002e8c <srand+0x4c>)
 8002e5c:	2142      	movs	r1, #66	; 0x42
 8002e5e:	f000 f895 	bl	8002f8c <__assert_func>
 8002e62:	490b      	ldr	r1, [pc, #44]	; (8002e90 <srand+0x50>)
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <srand+0x54>)
 8002e66:	e9c0 1300 	strd	r1, r3, [r0]
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <srand+0x58>)
 8002e6c:	6083      	str	r3, [r0, #8]
 8002e6e:	230b      	movs	r3, #11
 8002e70:	8183      	strh	r3, [r0, #12]
 8002e72:	2100      	movs	r1, #0
 8002e74:	2001      	movs	r0, #1
 8002e76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002e7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611c      	str	r4, [r3, #16]
 8002e80:	615a      	str	r2, [r3, #20]
 8002e82:	bd38      	pop	{r3, r4, r5, pc}
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	080043f8 	.word	0x080043f8
 8002e8c:	0800440f 	.word	0x0800440f
 8002e90:	abcd330e 	.word	0xabcd330e
 8002e94:	e66d1234 	.word	0xe66d1234
 8002e98:	0005deec 	.word	0x0005deec

08002e9c <rand>:
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <rand+0x5c>)
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	681c      	ldr	r4, [r3, #0]
 8002ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ea4:	b9b3      	cbnz	r3, 8002ed4 <rand+0x38>
 8002ea6:	2018      	movs	r0, #24
 8002ea8:	f000 f8b2 	bl	8003010 <malloc>
 8002eac:	63a0      	str	r0, [r4, #56]	; 0x38
 8002eae:	b928      	cbnz	r0, 8002ebc <rand+0x20>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <rand+0x60>)
 8002eb4:	4812      	ldr	r0, [pc, #72]	; (8002f00 <rand+0x64>)
 8002eb6:	214e      	movs	r1, #78	; 0x4e
 8002eb8:	f000 f868 	bl	8002f8c <__assert_func>
 8002ebc:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <rand+0x68>)
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <rand+0x6c>)
 8002ec0:	e9c0 2300 	strd	r2, r3, [r0]
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <rand+0x70>)
 8002ec6:	6083      	str	r3, [r0, #8]
 8002ec8:	230b      	movs	r3, #11
 8002eca:	8183      	strh	r3, [r0, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002ed4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <rand+0x74>)
 8002ed8:	6920      	ldr	r0, [r4, #16]
 8002eda:	6963      	ldr	r3, [r4, #20]
 8002edc:	490d      	ldr	r1, [pc, #52]	; (8002f14 <rand+0x78>)
 8002ede:	4342      	muls	r2, r0
 8002ee0:	fb01 2203 	mla	r2, r1, r3, r2
 8002ee4:	fba0 0101 	umull	r0, r1, r0, r1
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	eb42 0001 	adc.w	r0, r2, r1
 8002eee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002ef2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	2000000c 	.word	0x2000000c
 8002efc:	080043f8 	.word	0x080043f8
 8002f00:	0800440f 	.word	0x0800440f
 8002f04:	abcd330e 	.word	0xabcd330e
 8002f08:	e66d1234 	.word	0xe66d1234
 8002f0c:	0005deec 	.word	0x0005deec
 8002f10:	5851f42d 	.word	0x5851f42d
 8002f14:	4c957f2d 	.word	0x4c957f2d

08002f18 <siprintf>:
 8002f18:	b40e      	push	{r1, r2, r3}
 8002f1a:	b500      	push	{lr}
 8002f1c:	b09c      	sub	sp, #112	; 0x70
 8002f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8002f20:	9002      	str	r0, [sp, #8]
 8002f22:	9006      	str	r0, [sp, #24]
 8002f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f28:	4809      	ldr	r0, [pc, #36]	; (8002f50 <siprintf+0x38>)
 8002f2a:	9107      	str	r1, [sp, #28]
 8002f2c:	9104      	str	r1, [sp, #16]
 8002f2e:	4909      	ldr	r1, [pc, #36]	; (8002f54 <siprintf+0x3c>)
 8002f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f34:	9105      	str	r1, [sp, #20]
 8002f36:	6800      	ldr	r0, [r0, #0]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	a902      	add	r1, sp, #8
 8002f3c:	f000 f9ac 	bl	8003298 <_svfiprintf_r>
 8002f40:	9b02      	ldr	r3, [sp, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	b01c      	add	sp, #112	; 0x70
 8002f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f4c:	b003      	add	sp, #12
 8002f4e:	4770      	bx	lr
 8002f50:	2000000c 	.word	0x2000000c
 8002f54:	ffff0208 	.word	0xffff0208

08002f58 <time>:
 8002f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <time+0x30>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4669      	mov	r1, sp
 8002f60:	4604      	mov	r4, r0
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	f000 f842 	bl	8002fec <_gettimeofday_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	bfbe      	ittt	lt
 8002f6c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002f70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002f74:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f7c:	b10c      	cbz	r4, 8002f82 <time+0x2a>
 8002f7e:	e9c4 0100 	strd	r0, r1, [r4]
 8002f82:	b004      	add	sp, #16
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	bf00      	nop
 8002f88:	2000000c 	.word	0x2000000c

08002f8c <__assert_func>:
 8002f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f8e:	4614      	mov	r4, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <__assert_func+0x2c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4605      	mov	r5, r0
 8002f98:	68d8      	ldr	r0, [r3, #12]
 8002f9a:	b14c      	cbz	r4, 8002fb0 <__assert_func+0x24>
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <__assert_func+0x30>)
 8002f9e:	9100      	str	r1, [sp, #0]
 8002fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002fa4:	4906      	ldr	r1, [pc, #24]	; (8002fc0 <__assert_func+0x34>)
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	f000 f80e 	bl	8002fc8 <fiprintf>
 8002fac:	f000 fe32 	bl	8003c14 <abort>
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <__assert_func+0x38>)
 8002fb2:	461c      	mov	r4, r3
 8002fb4:	e7f3      	b.n	8002f9e <__assert_func+0x12>
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	0800446a 	.word	0x0800446a
 8002fc0:	08004477 	.word	0x08004477
 8002fc4:	080044a5 	.word	0x080044a5

08002fc8 <fiprintf>:
 8002fc8:	b40e      	push	{r1, r2, r3}
 8002fca:	b503      	push	{r0, r1, lr}
 8002fcc:	4601      	mov	r1, r0
 8002fce:	ab03      	add	r3, sp, #12
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <fiprintf+0x20>)
 8002fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	f000 fa87 	bl	80034ec <_vfiprintf_r>
 8002fde:	b002      	add	sp, #8
 8002fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fe4:	b003      	add	sp, #12
 8002fe6:	4770      	bx	lr
 8002fe8:	2000000c 	.word	0x2000000c

08002fec <_gettimeofday_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d07      	ldr	r5, [pc, #28]	; (800300c <_gettimeofday_r+0x20>)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	f001 f981 	bl	8004300 <_gettimeofday>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d102      	bne.n	8003008 <_gettimeofday_r+0x1c>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	b103      	cbz	r3, 8003008 <_gettimeofday_r+0x1c>
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	20000160 	.word	0x20000160

08003010 <malloc>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <malloc+0xc>)
 8003012:	4601      	mov	r1, r0
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f000 b86f 	b.w	80030f8 <_malloc_r>
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c

08003020 <_free_r>:
 8003020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003022:	2900      	cmp	r1, #0
 8003024:	d044      	beq.n	80030b0 <_free_r+0x90>
 8003026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800302a:	9001      	str	r0, [sp, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f1a1 0404 	sub.w	r4, r1, #4
 8003032:	bfb8      	it	lt
 8003034:	18e4      	addlt	r4, r4, r3
 8003036:	f001 f82f 	bl	8004098 <__malloc_lock>
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <_free_r+0x94>)
 800303c:	9801      	ldr	r0, [sp, #4]
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	b933      	cbnz	r3, 8003050 <_free_r+0x30>
 8003042:	6063      	str	r3, [r4, #4]
 8003044:	6014      	str	r4, [r2, #0]
 8003046:	b003      	add	sp, #12
 8003048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800304c:	f001 b82a 	b.w	80040a4 <__malloc_unlock>
 8003050:	42a3      	cmp	r3, r4
 8003052:	d908      	bls.n	8003066 <_free_r+0x46>
 8003054:	6825      	ldr	r5, [r4, #0]
 8003056:	1961      	adds	r1, r4, r5
 8003058:	428b      	cmp	r3, r1
 800305a:	bf01      	itttt	eq
 800305c:	6819      	ldreq	r1, [r3, #0]
 800305e:	685b      	ldreq	r3, [r3, #4]
 8003060:	1949      	addeq	r1, r1, r5
 8003062:	6021      	streq	r1, [r4, #0]
 8003064:	e7ed      	b.n	8003042 <_free_r+0x22>
 8003066:	461a      	mov	r2, r3
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b10b      	cbz	r3, 8003070 <_free_r+0x50>
 800306c:	42a3      	cmp	r3, r4
 800306e:	d9fa      	bls.n	8003066 <_free_r+0x46>
 8003070:	6811      	ldr	r1, [r2, #0]
 8003072:	1855      	adds	r5, r2, r1
 8003074:	42a5      	cmp	r5, r4
 8003076:	d10b      	bne.n	8003090 <_free_r+0x70>
 8003078:	6824      	ldr	r4, [r4, #0]
 800307a:	4421      	add	r1, r4
 800307c:	1854      	adds	r4, r2, r1
 800307e:	42a3      	cmp	r3, r4
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	d1e0      	bne.n	8003046 <_free_r+0x26>
 8003084:	681c      	ldr	r4, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	6053      	str	r3, [r2, #4]
 800308a:	4421      	add	r1, r4
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	e7da      	b.n	8003046 <_free_r+0x26>
 8003090:	d902      	bls.n	8003098 <_free_r+0x78>
 8003092:	230c      	movs	r3, #12
 8003094:	6003      	str	r3, [r0, #0]
 8003096:	e7d6      	b.n	8003046 <_free_r+0x26>
 8003098:	6825      	ldr	r5, [r4, #0]
 800309a:	1961      	adds	r1, r4, r5
 800309c:	428b      	cmp	r3, r1
 800309e:	bf04      	itt	eq
 80030a0:	6819      	ldreq	r1, [r3, #0]
 80030a2:	685b      	ldreq	r3, [r3, #4]
 80030a4:	6063      	str	r3, [r4, #4]
 80030a6:	bf04      	itt	eq
 80030a8:	1949      	addeq	r1, r1, r5
 80030aa:	6021      	streq	r1, [r4, #0]
 80030ac:	6054      	str	r4, [r2, #4]
 80030ae:	e7ca      	b.n	8003046 <_free_r+0x26>
 80030b0:	b003      	add	sp, #12
 80030b2:	bd30      	pop	{r4, r5, pc}
 80030b4:	20000158 	.word	0x20000158

080030b8 <sbrk_aligned>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4e0e      	ldr	r6, [pc, #56]	; (80030f4 <sbrk_aligned+0x3c>)
 80030bc:	460c      	mov	r4, r1
 80030be:	6831      	ldr	r1, [r6, #0]
 80030c0:	4605      	mov	r5, r0
 80030c2:	b911      	cbnz	r1, 80030ca <sbrk_aligned+0x12>
 80030c4:	f000 fcd6 	bl	8003a74 <_sbrk_r>
 80030c8:	6030      	str	r0, [r6, #0]
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 fcd1 	bl	8003a74 <_sbrk_r>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d00a      	beq.n	80030ec <sbrk_aligned+0x34>
 80030d6:	1cc4      	adds	r4, r0, #3
 80030d8:	f024 0403 	bic.w	r4, r4, #3
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d007      	beq.n	80030f0 <sbrk_aligned+0x38>
 80030e0:	1a21      	subs	r1, r4, r0
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 fcc6 	bl	8003a74 <_sbrk_r>
 80030e8:	3001      	adds	r0, #1
 80030ea:	d101      	bne.n	80030f0 <sbrk_aligned+0x38>
 80030ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80030f0:	4620      	mov	r0, r4
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	2000015c 	.word	0x2000015c

080030f8 <_malloc_r>:
 80030f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fc:	1ccd      	adds	r5, r1, #3
 80030fe:	f025 0503 	bic.w	r5, r5, #3
 8003102:	3508      	adds	r5, #8
 8003104:	2d0c      	cmp	r5, #12
 8003106:	bf38      	it	cc
 8003108:	250c      	movcc	r5, #12
 800310a:	2d00      	cmp	r5, #0
 800310c:	4607      	mov	r7, r0
 800310e:	db01      	blt.n	8003114 <_malloc_r+0x1c>
 8003110:	42a9      	cmp	r1, r5
 8003112:	d905      	bls.n	8003120 <_malloc_r+0x28>
 8003114:	230c      	movs	r3, #12
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	2600      	movs	r6, #0
 800311a:	4630      	mov	r0, r6
 800311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003120:	4e2e      	ldr	r6, [pc, #184]	; (80031dc <_malloc_r+0xe4>)
 8003122:	f000 ffb9 	bl	8004098 <__malloc_lock>
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	461c      	mov	r4, r3
 800312a:	bb34      	cbnz	r4, 800317a <_malloc_r+0x82>
 800312c:	4629      	mov	r1, r5
 800312e:	4638      	mov	r0, r7
 8003130:	f7ff ffc2 	bl	80030b8 <sbrk_aligned>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	4604      	mov	r4, r0
 8003138:	d14d      	bne.n	80031d6 <_malloc_r+0xde>
 800313a:	6834      	ldr	r4, [r6, #0]
 800313c:	4626      	mov	r6, r4
 800313e:	2e00      	cmp	r6, #0
 8003140:	d140      	bne.n	80031c4 <_malloc_r+0xcc>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	4631      	mov	r1, r6
 8003146:	4638      	mov	r0, r7
 8003148:	eb04 0803 	add.w	r8, r4, r3
 800314c:	f000 fc92 	bl	8003a74 <_sbrk_r>
 8003150:	4580      	cmp	r8, r0
 8003152:	d13a      	bne.n	80031ca <_malloc_r+0xd2>
 8003154:	6821      	ldr	r1, [r4, #0]
 8003156:	3503      	adds	r5, #3
 8003158:	1a6d      	subs	r5, r5, r1
 800315a:	f025 0503 	bic.w	r5, r5, #3
 800315e:	3508      	adds	r5, #8
 8003160:	2d0c      	cmp	r5, #12
 8003162:	bf38      	it	cc
 8003164:	250c      	movcc	r5, #12
 8003166:	4629      	mov	r1, r5
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff ffa5 	bl	80030b8 <sbrk_aligned>
 800316e:	3001      	adds	r0, #1
 8003170:	d02b      	beq.n	80031ca <_malloc_r+0xd2>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	442b      	add	r3, r5
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	e00e      	b.n	8003198 <_malloc_r+0xa0>
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	1b52      	subs	r2, r2, r5
 800317e:	d41e      	bmi.n	80031be <_malloc_r+0xc6>
 8003180:	2a0b      	cmp	r2, #11
 8003182:	d916      	bls.n	80031b2 <_malloc_r+0xba>
 8003184:	1961      	adds	r1, r4, r5
 8003186:	42a3      	cmp	r3, r4
 8003188:	6025      	str	r5, [r4, #0]
 800318a:	bf18      	it	ne
 800318c:	6059      	strne	r1, [r3, #4]
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	bf08      	it	eq
 8003192:	6031      	streq	r1, [r6, #0]
 8003194:	5162      	str	r2, [r4, r5]
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	4638      	mov	r0, r7
 800319a:	f104 060b 	add.w	r6, r4, #11
 800319e:	f000 ff81 	bl	80040a4 <__malloc_unlock>
 80031a2:	f026 0607 	bic.w	r6, r6, #7
 80031a6:	1d23      	adds	r3, r4, #4
 80031a8:	1af2      	subs	r2, r6, r3
 80031aa:	d0b6      	beq.n	800311a <_malloc_r+0x22>
 80031ac:	1b9b      	subs	r3, r3, r6
 80031ae:	50a3      	str	r3, [r4, r2]
 80031b0:	e7b3      	b.n	800311a <_malloc_r+0x22>
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	bf0c      	ite	eq
 80031b8:	6032      	streq	r2, [r6, #0]
 80031ba:	605a      	strne	r2, [r3, #4]
 80031bc:	e7ec      	b.n	8003198 <_malloc_r+0xa0>
 80031be:	4623      	mov	r3, r4
 80031c0:	6864      	ldr	r4, [r4, #4]
 80031c2:	e7b2      	b.n	800312a <_malloc_r+0x32>
 80031c4:	4634      	mov	r4, r6
 80031c6:	6876      	ldr	r6, [r6, #4]
 80031c8:	e7b9      	b.n	800313e <_malloc_r+0x46>
 80031ca:	230c      	movs	r3, #12
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4638      	mov	r0, r7
 80031d0:	f000 ff68 	bl	80040a4 <__malloc_unlock>
 80031d4:	e7a1      	b.n	800311a <_malloc_r+0x22>
 80031d6:	6025      	str	r5, [r4, #0]
 80031d8:	e7de      	b.n	8003198 <_malloc_r+0xa0>
 80031da:	bf00      	nop
 80031dc:	20000158 	.word	0x20000158

080031e0 <__ssputs_r>:
 80031e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	429e      	cmp	r6, r3
 80031e8:	4682      	mov	sl, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	4690      	mov	r8, r2
 80031ee:	461f      	mov	r7, r3
 80031f0:	d838      	bhi.n	8003264 <__ssputs_r+0x84>
 80031f2:	898a      	ldrh	r2, [r1, #12]
 80031f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031f8:	d032      	beq.n	8003260 <__ssputs_r+0x80>
 80031fa:	6825      	ldr	r5, [r4, #0]
 80031fc:	6909      	ldr	r1, [r1, #16]
 80031fe:	eba5 0901 	sub.w	r9, r5, r1
 8003202:	6965      	ldr	r5, [r4, #20]
 8003204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800320c:	3301      	adds	r3, #1
 800320e:	444b      	add	r3, r9
 8003210:	106d      	asrs	r5, r5, #1
 8003212:	429d      	cmp	r5, r3
 8003214:	bf38      	it	cc
 8003216:	461d      	movcc	r5, r3
 8003218:	0553      	lsls	r3, r2, #21
 800321a:	d531      	bpl.n	8003280 <__ssputs_r+0xa0>
 800321c:	4629      	mov	r1, r5
 800321e:	f7ff ff6b 	bl	80030f8 <_malloc_r>
 8003222:	4606      	mov	r6, r0
 8003224:	b950      	cbnz	r0, 800323c <__ssputs_r+0x5c>
 8003226:	230c      	movs	r3, #12
 8003228:	f8ca 3000 	str.w	r3, [sl]
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323c:	6921      	ldr	r1, [r4, #16]
 800323e:	464a      	mov	r2, r9
 8003240:	f7ff fde8 	bl	8002e14 <memcpy>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324e:	81a3      	strh	r3, [r4, #12]
 8003250:	6126      	str	r6, [r4, #16]
 8003252:	6165      	str	r5, [r4, #20]
 8003254:	444e      	add	r6, r9
 8003256:	eba5 0509 	sub.w	r5, r5, r9
 800325a:	6026      	str	r6, [r4, #0]
 800325c:	60a5      	str	r5, [r4, #8]
 800325e:	463e      	mov	r6, r7
 8003260:	42be      	cmp	r6, r7
 8003262:	d900      	bls.n	8003266 <__ssputs_r+0x86>
 8003264:	463e      	mov	r6, r7
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	4632      	mov	r2, r6
 800326a:	4641      	mov	r1, r8
 800326c:	f000 fefa 	bl	8004064 <memmove>
 8003270:	68a3      	ldr	r3, [r4, #8]
 8003272:	1b9b      	subs	r3, r3, r6
 8003274:	60a3      	str	r3, [r4, #8]
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	4433      	add	r3, r6
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	2000      	movs	r0, #0
 800327e:	e7db      	b.n	8003238 <__ssputs_r+0x58>
 8003280:	462a      	mov	r2, r5
 8003282:	f000 ff15 	bl	80040b0 <_realloc_r>
 8003286:	4606      	mov	r6, r0
 8003288:	2800      	cmp	r0, #0
 800328a:	d1e1      	bne.n	8003250 <__ssputs_r+0x70>
 800328c:	6921      	ldr	r1, [r4, #16]
 800328e:	4650      	mov	r0, sl
 8003290:	f7ff fec6 	bl	8003020 <_free_r>
 8003294:	e7c7      	b.n	8003226 <__ssputs_r+0x46>
	...

08003298 <_svfiprintf_r>:
 8003298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	4698      	mov	r8, r3
 800329e:	898b      	ldrh	r3, [r1, #12]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	b09d      	sub	sp, #116	; 0x74
 80032a4:	4607      	mov	r7, r0
 80032a6:	460d      	mov	r5, r1
 80032a8:	4614      	mov	r4, r2
 80032aa:	d50e      	bpl.n	80032ca <_svfiprintf_r+0x32>
 80032ac:	690b      	ldr	r3, [r1, #16]
 80032ae:	b963      	cbnz	r3, 80032ca <_svfiprintf_r+0x32>
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	f7ff ff21 	bl	80030f8 <_malloc_r>
 80032b6:	6028      	str	r0, [r5, #0]
 80032b8:	6128      	str	r0, [r5, #16]
 80032ba:	b920      	cbnz	r0, 80032c6 <_svfiprintf_r+0x2e>
 80032bc:	230c      	movs	r3, #12
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c4:	e0d1      	b.n	800346a <_svfiprintf_r+0x1d2>
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	616b      	str	r3, [r5, #20]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9309      	str	r3, [sp, #36]	; 0x24
 80032ce:	2320      	movs	r3, #32
 80032d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d8:	2330      	movs	r3, #48	; 0x30
 80032da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003484 <_svfiprintf_r+0x1ec>
 80032de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032e2:	f04f 0901 	mov.w	r9, #1
 80032e6:	4623      	mov	r3, r4
 80032e8:	469a      	mov	sl, r3
 80032ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ee:	b10a      	cbz	r2, 80032f4 <_svfiprintf_r+0x5c>
 80032f0:	2a25      	cmp	r2, #37	; 0x25
 80032f2:	d1f9      	bne.n	80032e8 <_svfiprintf_r+0x50>
 80032f4:	ebba 0b04 	subs.w	fp, sl, r4
 80032f8:	d00b      	beq.n	8003312 <_svfiprintf_r+0x7a>
 80032fa:	465b      	mov	r3, fp
 80032fc:	4622      	mov	r2, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	4638      	mov	r0, r7
 8003302:	f7ff ff6d 	bl	80031e0 <__ssputs_r>
 8003306:	3001      	adds	r0, #1
 8003308:	f000 80aa 	beq.w	8003460 <_svfiprintf_r+0x1c8>
 800330c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800330e:	445a      	add	r2, fp
 8003310:	9209      	str	r2, [sp, #36]	; 0x24
 8003312:	f89a 3000 	ldrb.w	r3, [sl]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80a2 	beq.w	8003460 <_svfiprintf_r+0x1c8>
 800331c:	2300      	movs	r3, #0
 800331e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003326:	f10a 0a01 	add.w	sl, sl, #1
 800332a:	9304      	str	r3, [sp, #16]
 800332c:	9307      	str	r3, [sp, #28]
 800332e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003332:	931a      	str	r3, [sp, #104]	; 0x68
 8003334:	4654      	mov	r4, sl
 8003336:	2205      	movs	r2, #5
 8003338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800333c:	4851      	ldr	r0, [pc, #324]	; (8003484 <_svfiprintf_r+0x1ec>)
 800333e:	f7fc ff4f 	bl	80001e0 <memchr>
 8003342:	9a04      	ldr	r2, [sp, #16]
 8003344:	b9d8      	cbnz	r0, 800337e <_svfiprintf_r+0xe6>
 8003346:	06d0      	lsls	r0, r2, #27
 8003348:	bf44      	itt	mi
 800334a:	2320      	movmi	r3, #32
 800334c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003350:	0711      	lsls	r1, r2, #28
 8003352:	bf44      	itt	mi
 8003354:	232b      	movmi	r3, #43	; 0x2b
 8003356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800335a:	f89a 3000 	ldrb.w	r3, [sl]
 800335e:	2b2a      	cmp	r3, #42	; 0x2a
 8003360:	d015      	beq.n	800338e <_svfiprintf_r+0xf6>
 8003362:	9a07      	ldr	r2, [sp, #28]
 8003364:	4654      	mov	r4, sl
 8003366:	2000      	movs	r0, #0
 8003368:	f04f 0c0a 	mov.w	ip, #10
 800336c:	4621      	mov	r1, r4
 800336e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003372:	3b30      	subs	r3, #48	; 0x30
 8003374:	2b09      	cmp	r3, #9
 8003376:	d94e      	bls.n	8003416 <_svfiprintf_r+0x17e>
 8003378:	b1b0      	cbz	r0, 80033a8 <_svfiprintf_r+0x110>
 800337a:	9207      	str	r2, [sp, #28]
 800337c:	e014      	b.n	80033a8 <_svfiprintf_r+0x110>
 800337e:	eba0 0308 	sub.w	r3, r0, r8
 8003382:	fa09 f303 	lsl.w	r3, r9, r3
 8003386:	4313      	orrs	r3, r2
 8003388:	9304      	str	r3, [sp, #16]
 800338a:	46a2      	mov	sl, r4
 800338c:	e7d2      	b.n	8003334 <_svfiprintf_r+0x9c>
 800338e:	9b03      	ldr	r3, [sp, #12]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	9103      	str	r1, [sp, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfbb      	ittet	lt
 800339a:	425b      	neglt	r3, r3
 800339c:	f042 0202 	orrlt.w	r2, r2, #2
 80033a0:	9307      	strge	r3, [sp, #28]
 80033a2:	9307      	strlt	r3, [sp, #28]
 80033a4:	bfb8      	it	lt
 80033a6:	9204      	strlt	r2, [sp, #16]
 80033a8:	7823      	ldrb	r3, [r4, #0]
 80033aa:	2b2e      	cmp	r3, #46	; 0x2e
 80033ac:	d10c      	bne.n	80033c8 <_svfiprintf_r+0x130>
 80033ae:	7863      	ldrb	r3, [r4, #1]
 80033b0:	2b2a      	cmp	r3, #42	; 0x2a
 80033b2:	d135      	bne.n	8003420 <_svfiprintf_r+0x188>
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	1d1a      	adds	r2, r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	9203      	str	r2, [sp, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bfb8      	it	lt
 80033c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033c4:	3402      	adds	r4, #2
 80033c6:	9305      	str	r3, [sp, #20]
 80033c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003494 <_svfiprintf_r+0x1fc>
 80033cc:	7821      	ldrb	r1, [r4, #0]
 80033ce:	2203      	movs	r2, #3
 80033d0:	4650      	mov	r0, sl
 80033d2:	f7fc ff05 	bl	80001e0 <memchr>
 80033d6:	b140      	cbz	r0, 80033ea <_svfiprintf_r+0x152>
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	eba0 000a 	sub.w	r0, r0, sl
 80033de:	fa03 f000 	lsl.w	r0, r3, r0
 80033e2:	9b04      	ldr	r3, [sp, #16]
 80033e4:	4303      	orrs	r3, r0
 80033e6:	3401      	adds	r4, #1
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ee:	4826      	ldr	r0, [pc, #152]	; (8003488 <_svfiprintf_r+0x1f0>)
 80033f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033f4:	2206      	movs	r2, #6
 80033f6:	f7fc fef3 	bl	80001e0 <memchr>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d038      	beq.n	8003470 <_svfiprintf_r+0x1d8>
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <_svfiprintf_r+0x1f4>)
 8003400:	bb1b      	cbnz	r3, 800344a <_svfiprintf_r+0x1b2>
 8003402:	9b03      	ldr	r3, [sp, #12]
 8003404:	3307      	adds	r3, #7
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	3308      	adds	r3, #8
 800340c:	9303      	str	r3, [sp, #12]
 800340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003410:	4433      	add	r3, r6
 8003412:	9309      	str	r3, [sp, #36]	; 0x24
 8003414:	e767      	b.n	80032e6 <_svfiprintf_r+0x4e>
 8003416:	fb0c 3202 	mla	r2, ip, r2, r3
 800341a:	460c      	mov	r4, r1
 800341c:	2001      	movs	r0, #1
 800341e:	e7a5      	b.n	800336c <_svfiprintf_r+0xd4>
 8003420:	2300      	movs	r3, #0
 8003422:	3401      	adds	r4, #1
 8003424:	9305      	str	r3, [sp, #20]
 8003426:	4619      	mov	r1, r3
 8003428:	f04f 0c0a 	mov.w	ip, #10
 800342c:	4620      	mov	r0, r4
 800342e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003432:	3a30      	subs	r2, #48	; 0x30
 8003434:	2a09      	cmp	r2, #9
 8003436:	d903      	bls.n	8003440 <_svfiprintf_r+0x1a8>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0c5      	beq.n	80033c8 <_svfiprintf_r+0x130>
 800343c:	9105      	str	r1, [sp, #20]
 800343e:	e7c3      	b.n	80033c8 <_svfiprintf_r+0x130>
 8003440:	fb0c 2101 	mla	r1, ip, r1, r2
 8003444:	4604      	mov	r4, r0
 8003446:	2301      	movs	r3, #1
 8003448:	e7f0      	b.n	800342c <_svfiprintf_r+0x194>
 800344a:	ab03      	add	r3, sp, #12
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	462a      	mov	r2, r5
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <_svfiprintf_r+0x1f8>)
 8003452:	a904      	add	r1, sp, #16
 8003454:	4638      	mov	r0, r7
 8003456:	f3af 8000 	nop.w
 800345a:	1c42      	adds	r2, r0, #1
 800345c:	4606      	mov	r6, r0
 800345e:	d1d6      	bne.n	800340e <_svfiprintf_r+0x176>
 8003460:	89ab      	ldrh	r3, [r5, #12]
 8003462:	065b      	lsls	r3, r3, #25
 8003464:	f53f af2c 	bmi.w	80032c0 <_svfiprintf_r+0x28>
 8003468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800346a:	b01d      	add	sp, #116	; 0x74
 800346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003470:	ab03      	add	r3, sp, #12
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	462a      	mov	r2, r5
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <_svfiprintf_r+0x1f8>)
 8003478:	a904      	add	r1, sp, #16
 800347a:	4638      	mov	r0, r7
 800347c:	f000 f9d4 	bl	8003828 <_printf_i>
 8003480:	e7eb      	b.n	800345a <_svfiprintf_r+0x1c2>
 8003482:	bf00      	nop
 8003484:	080044a6 	.word	0x080044a6
 8003488:	080044b0 	.word	0x080044b0
 800348c:	00000000 	.word	0x00000000
 8003490:	080031e1 	.word	0x080031e1
 8003494:	080044ac 	.word	0x080044ac

08003498 <__sfputc_r>:
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	3b01      	subs	r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	b410      	push	{r4}
 80034a0:	6093      	str	r3, [r2, #8]
 80034a2:	da08      	bge.n	80034b6 <__sfputc_r+0x1e>
 80034a4:	6994      	ldr	r4, [r2, #24]
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	db01      	blt.n	80034ae <__sfputc_r+0x16>
 80034aa:	290a      	cmp	r1, #10
 80034ac:	d103      	bne.n	80034b6 <__sfputc_r+0x1e>
 80034ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034b2:	f000 baef 	b.w	8003a94 <__swbuf_r>
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	1c58      	adds	r0, r3, #1
 80034ba:	6010      	str	r0, [r2, #0]
 80034bc:	7019      	strb	r1, [r3, #0]
 80034be:	4608      	mov	r0, r1
 80034c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <__sfputs_r>:
 80034c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c8:	4606      	mov	r6, r0
 80034ca:	460f      	mov	r7, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	18d5      	adds	r5, r2, r3
 80034d0:	42ac      	cmp	r4, r5
 80034d2:	d101      	bne.n	80034d8 <__sfputs_r+0x12>
 80034d4:	2000      	movs	r0, #0
 80034d6:	e007      	b.n	80034e8 <__sfputs_r+0x22>
 80034d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034dc:	463a      	mov	r2, r7
 80034de:	4630      	mov	r0, r6
 80034e0:	f7ff ffda 	bl	8003498 <__sfputc_r>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d1f3      	bne.n	80034d0 <__sfputs_r+0xa>
 80034e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034ec <_vfiprintf_r>:
 80034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f0:	460d      	mov	r5, r1
 80034f2:	b09d      	sub	sp, #116	; 0x74
 80034f4:	4614      	mov	r4, r2
 80034f6:	4698      	mov	r8, r3
 80034f8:	4606      	mov	r6, r0
 80034fa:	b118      	cbz	r0, 8003504 <_vfiprintf_r+0x18>
 80034fc:	6983      	ldr	r3, [r0, #24]
 80034fe:	b90b      	cbnz	r3, 8003504 <_vfiprintf_r+0x18>
 8003500:	f000 fcaa 	bl	8003e58 <__sinit>
 8003504:	4b89      	ldr	r3, [pc, #548]	; (800372c <_vfiprintf_r+0x240>)
 8003506:	429d      	cmp	r5, r3
 8003508:	d11b      	bne.n	8003542 <_vfiprintf_r+0x56>
 800350a:	6875      	ldr	r5, [r6, #4]
 800350c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800350e:	07d9      	lsls	r1, r3, #31
 8003510:	d405      	bmi.n	800351e <_vfiprintf_r+0x32>
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	059a      	lsls	r2, r3, #22
 8003516:	d402      	bmi.n	800351e <_vfiprintf_r+0x32>
 8003518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800351a:	f000 fd3b 	bl	8003f94 <__retarget_lock_acquire_recursive>
 800351e:	89ab      	ldrh	r3, [r5, #12]
 8003520:	071b      	lsls	r3, r3, #28
 8003522:	d501      	bpl.n	8003528 <_vfiprintf_r+0x3c>
 8003524:	692b      	ldr	r3, [r5, #16]
 8003526:	b9eb      	cbnz	r3, 8003564 <_vfiprintf_r+0x78>
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f000 fb04 	bl	8003b38 <__swsetup_r>
 8003530:	b1c0      	cbz	r0, 8003564 <_vfiprintf_r+0x78>
 8003532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003534:	07dc      	lsls	r4, r3, #31
 8003536:	d50e      	bpl.n	8003556 <_vfiprintf_r+0x6a>
 8003538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800353c:	b01d      	add	sp, #116	; 0x74
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003542:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <_vfiprintf_r+0x244>)
 8003544:	429d      	cmp	r5, r3
 8003546:	d101      	bne.n	800354c <_vfiprintf_r+0x60>
 8003548:	68b5      	ldr	r5, [r6, #8]
 800354a:	e7df      	b.n	800350c <_vfiprintf_r+0x20>
 800354c:	4b79      	ldr	r3, [pc, #484]	; (8003734 <_vfiprintf_r+0x248>)
 800354e:	429d      	cmp	r5, r3
 8003550:	bf08      	it	eq
 8003552:	68f5      	ldreq	r5, [r6, #12]
 8003554:	e7da      	b.n	800350c <_vfiprintf_r+0x20>
 8003556:	89ab      	ldrh	r3, [r5, #12]
 8003558:	0598      	lsls	r0, r3, #22
 800355a:	d4ed      	bmi.n	8003538 <_vfiprintf_r+0x4c>
 800355c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800355e:	f000 fd1a 	bl	8003f96 <__retarget_lock_release_recursive>
 8003562:	e7e9      	b.n	8003538 <_vfiprintf_r+0x4c>
 8003564:	2300      	movs	r3, #0
 8003566:	9309      	str	r3, [sp, #36]	; 0x24
 8003568:	2320      	movs	r3, #32
 800356a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800356e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003572:	2330      	movs	r3, #48	; 0x30
 8003574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003738 <_vfiprintf_r+0x24c>
 8003578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800357c:	f04f 0901 	mov.w	r9, #1
 8003580:	4623      	mov	r3, r4
 8003582:	469a      	mov	sl, r3
 8003584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003588:	b10a      	cbz	r2, 800358e <_vfiprintf_r+0xa2>
 800358a:	2a25      	cmp	r2, #37	; 0x25
 800358c:	d1f9      	bne.n	8003582 <_vfiprintf_r+0x96>
 800358e:	ebba 0b04 	subs.w	fp, sl, r4
 8003592:	d00b      	beq.n	80035ac <_vfiprintf_r+0xc0>
 8003594:	465b      	mov	r3, fp
 8003596:	4622      	mov	r2, r4
 8003598:	4629      	mov	r1, r5
 800359a:	4630      	mov	r0, r6
 800359c:	f7ff ff93 	bl	80034c6 <__sfputs_r>
 80035a0:	3001      	adds	r0, #1
 80035a2:	f000 80aa 	beq.w	80036fa <_vfiprintf_r+0x20e>
 80035a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035a8:	445a      	add	r2, fp
 80035aa:	9209      	str	r2, [sp, #36]	; 0x24
 80035ac:	f89a 3000 	ldrb.w	r3, [sl]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a2 	beq.w	80036fa <_vfiprintf_r+0x20e>
 80035b6:	2300      	movs	r3, #0
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035c0:	f10a 0a01 	add.w	sl, sl, #1
 80035c4:	9304      	str	r3, [sp, #16]
 80035c6:	9307      	str	r3, [sp, #28]
 80035c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035cc:	931a      	str	r3, [sp, #104]	; 0x68
 80035ce:	4654      	mov	r4, sl
 80035d0:	2205      	movs	r2, #5
 80035d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035d6:	4858      	ldr	r0, [pc, #352]	; (8003738 <_vfiprintf_r+0x24c>)
 80035d8:	f7fc fe02 	bl	80001e0 <memchr>
 80035dc:	9a04      	ldr	r2, [sp, #16]
 80035de:	b9d8      	cbnz	r0, 8003618 <_vfiprintf_r+0x12c>
 80035e0:	06d1      	lsls	r1, r2, #27
 80035e2:	bf44      	itt	mi
 80035e4:	2320      	movmi	r3, #32
 80035e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ea:	0713      	lsls	r3, r2, #28
 80035ec:	bf44      	itt	mi
 80035ee:	232b      	movmi	r3, #43	; 0x2b
 80035f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035f4:	f89a 3000 	ldrb.w	r3, [sl]
 80035f8:	2b2a      	cmp	r3, #42	; 0x2a
 80035fa:	d015      	beq.n	8003628 <_vfiprintf_r+0x13c>
 80035fc:	9a07      	ldr	r2, [sp, #28]
 80035fe:	4654      	mov	r4, sl
 8003600:	2000      	movs	r0, #0
 8003602:	f04f 0c0a 	mov.w	ip, #10
 8003606:	4621      	mov	r1, r4
 8003608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800360c:	3b30      	subs	r3, #48	; 0x30
 800360e:	2b09      	cmp	r3, #9
 8003610:	d94e      	bls.n	80036b0 <_vfiprintf_r+0x1c4>
 8003612:	b1b0      	cbz	r0, 8003642 <_vfiprintf_r+0x156>
 8003614:	9207      	str	r2, [sp, #28]
 8003616:	e014      	b.n	8003642 <_vfiprintf_r+0x156>
 8003618:	eba0 0308 	sub.w	r3, r0, r8
 800361c:	fa09 f303 	lsl.w	r3, r9, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	46a2      	mov	sl, r4
 8003626:	e7d2      	b.n	80035ce <_vfiprintf_r+0xe2>
 8003628:	9b03      	ldr	r3, [sp, #12]
 800362a:	1d19      	adds	r1, r3, #4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	9103      	str	r1, [sp, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	bfbb      	ittet	lt
 8003634:	425b      	neglt	r3, r3
 8003636:	f042 0202 	orrlt.w	r2, r2, #2
 800363a:	9307      	strge	r3, [sp, #28]
 800363c:	9307      	strlt	r3, [sp, #28]
 800363e:	bfb8      	it	lt
 8003640:	9204      	strlt	r2, [sp, #16]
 8003642:	7823      	ldrb	r3, [r4, #0]
 8003644:	2b2e      	cmp	r3, #46	; 0x2e
 8003646:	d10c      	bne.n	8003662 <_vfiprintf_r+0x176>
 8003648:	7863      	ldrb	r3, [r4, #1]
 800364a:	2b2a      	cmp	r3, #42	; 0x2a
 800364c:	d135      	bne.n	80036ba <_vfiprintf_r+0x1ce>
 800364e:	9b03      	ldr	r3, [sp, #12]
 8003650:	1d1a      	adds	r2, r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	9203      	str	r2, [sp, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800365e:	3402      	adds	r4, #2
 8003660:	9305      	str	r3, [sp, #20]
 8003662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003748 <_vfiprintf_r+0x25c>
 8003666:	7821      	ldrb	r1, [r4, #0]
 8003668:	2203      	movs	r2, #3
 800366a:	4650      	mov	r0, sl
 800366c:	f7fc fdb8 	bl	80001e0 <memchr>
 8003670:	b140      	cbz	r0, 8003684 <_vfiprintf_r+0x198>
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	eba0 000a 	sub.w	r0, r0, sl
 8003678:	fa03 f000 	lsl.w	r0, r3, r0
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	4303      	orrs	r3, r0
 8003680:	3401      	adds	r4, #1
 8003682:	9304      	str	r3, [sp, #16]
 8003684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003688:	482c      	ldr	r0, [pc, #176]	; (800373c <_vfiprintf_r+0x250>)
 800368a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800368e:	2206      	movs	r2, #6
 8003690:	f7fc fda6 	bl	80001e0 <memchr>
 8003694:	2800      	cmp	r0, #0
 8003696:	d03f      	beq.n	8003718 <_vfiprintf_r+0x22c>
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <_vfiprintf_r+0x254>)
 800369a:	bb1b      	cbnz	r3, 80036e4 <_vfiprintf_r+0x1f8>
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	3307      	adds	r3, #7
 80036a0:	f023 0307 	bic.w	r3, r3, #7
 80036a4:	3308      	adds	r3, #8
 80036a6:	9303      	str	r3, [sp, #12]
 80036a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036aa:	443b      	add	r3, r7
 80036ac:	9309      	str	r3, [sp, #36]	; 0x24
 80036ae:	e767      	b.n	8003580 <_vfiprintf_r+0x94>
 80036b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80036b4:	460c      	mov	r4, r1
 80036b6:	2001      	movs	r0, #1
 80036b8:	e7a5      	b.n	8003606 <_vfiprintf_r+0x11a>
 80036ba:	2300      	movs	r3, #0
 80036bc:	3401      	adds	r4, #1
 80036be:	9305      	str	r3, [sp, #20]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f04f 0c0a 	mov.w	ip, #10
 80036c6:	4620      	mov	r0, r4
 80036c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036cc:	3a30      	subs	r2, #48	; 0x30
 80036ce:	2a09      	cmp	r2, #9
 80036d0:	d903      	bls.n	80036da <_vfiprintf_r+0x1ee>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0c5      	beq.n	8003662 <_vfiprintf_r+0x176>
 80036d6:	9105      	str	r1, [sp, #20]
 80036d8:	e7c3      	b.n	8003662 <_vfiprintf_r+0x176>
 80036da:	fb0c 2101 	mla	r1, ip, r1, r2
 80036de:	4604      	mov	r4, r0
 80036e0:	2301      	movs	r3, #1
 80036e2:	e7f0      	b.n	80036c6 <_vfiprintf_r+0x1da>
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	462a      	mov	r2, r5
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <_vfiprintf_r+0x258>)
 80036ec:	a904      	add	r1, sp, #16
 80036ee:	4630      	mov	r0, r6
 80036f0:	f3af 8000 	nop.w
 80036f4:	4607      	mov	r7, r0
 80036f6:	1c78      	adds	r0, r7, #1
 80036f8:	d1d6      	bne.n	80036a8 <_vfiprintf_r+0x1bc>
 80036fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036fc:	07d9      	lsls	r1, r3, #31
 80036fe:	d405      	bmi.n	800370c <_vfiprintf_r+0x220>
 8003700:	89ab      	ldrh	r3, [r5, #12]
 8003702:	059a      	lsls	r2, r3, #22
 8003704:	d402      	bmi.n	800370c <_vfiprintf_r+0x220>
 8003706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003708:	f000 fc45 	bl	8003f96 <__retarget_lock_release_recursive>
 800370c:	89ab      	ldrh	r3, [r5, #12]
 800370e:	065b      	lsls	r3, r3, #25
 8003710:	f53f af12 	bmi.w	8003538 <_vfiprintf_r+0x4c>
 8003714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003716:	e711      	b.n	800353c <_vfiprintf_r+0x50>
 8003718:	ab03      	add	r3, sp, #12
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	462a      	mov	r2, r5
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <_vfiprintf_r+0x258>)
 8003720:	a904      	add	r1, sp, #16
 8003722:	4630      	mov	r0, r6
 8003724:	f000 f880 	bl	8003828 <_printf_i>
 8003728:	e7e4      	b.n	80036f4 <_vfiprintf_r+0x208>
 800372a:	bf00      	nop
 800372c:	080044fc 	.word	0x080044fc
 8003730:	0800451c 	.word	0x0800451c
 8003734:	080044dc 	.word	0x080044dc
 8003738:	080044a6 	.word	0x080044a6
 800373c:	080044b0 	.word	0x080044b0
 8003740:	00000000 	.word	0x00000000
 8003744:	080034c7 	.word	0x080034c7
 8003748:	080044ac 	.word	0x080044ac

0800374c <_printf_common>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	4616      	mov	r6, r2
 8003752:	4699      	mov	r9, r3
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800375c:	4293      	cmp	r3, r2
 800375e:	bfb8      	it	lt
 8003760:	4613      	movlt	r3, r2
 8003762:	6033      	str	r3, [r6, #0]
 8003764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003768:	4607      	mov	r7, r0
 800376a:	460c      	mov	r4, r1
 800376c:	b10a      	cbz	r2, 8003772 <_printf_common+0x26>
 800376e:	3301      	adds	r3, #1
 8003770:	6033      	str	r3, [r6, #0]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	0699      	lsls	r1, r3, #26
 8003776:	bf42      	ittt	mi
 8003778:	6833      	ldrmi	r3, [r6, #0]
 800377a:	3302      	addmi	r3, #2
 800377c:	6033      	strmi	r3, [r6, #0]
 800377e:	6825      	ldr	r5, [r4, #0]
 8003780:	f015 0506 	ands.w	r5, r5, #6
 8003784:	d106      	bne.n	8003794 <_printf_common+0x48>
 8003786:	f104 0a19 	add.w	sl, r4, #25
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	6832      	ldr	r2, [r6, #0]
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	42ab      	cmp	r3, r5
 8003792:	dc26      	bgt.n	80037e2 <_printf_common+0x96>
 8003794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003798:	1e13      	subs	r3, r2, #0
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	bf18      	it	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	0692      	lsls	r2, r2, #26
 80037a2:	d42b      	bmi.n	80037fc <_printf_common+0xb0>
 80037a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a8:	4649      	mov	r1, r9
 80037aa:	4638      	mov	r0, r7
 80037ac:	47c0      	blx	r8
 80037ae:	3001      	adds	r0, #1
 80037b0:	d01e      	beq.n	80037f0 <_printf_common+0xa4>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	68e5      	ldr	r5, [r4, #12]
 80037b6:	6832      	ldr	r2, [r6, #0]
 80037b8:	f003 0306 	and.w	r3, r3, #6
 80037bc:	2b04      	cmp	r3, #4
 80037be:	bf08      	it	eq
 80037c0:	1aad      	subeq	r5, r5, r2
 80037c2:	68a3      	ldr	r3, [r4, #8]
 80037c4:	6922      	ldr	r2, [r4, #16]
 80037c6:	bf0c      	ite	eq
 80037c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037cc:	2500      	movne	r5, #0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfc4      	itt	gt
 80037d2:	1a9b      	subgt	r3, r3, r2
 80037d4:	18ed      	addgt	r5, r5, r3
 80037d6:	2600      	movs	r6, #0
 80037d8:	341a      	adds	r4, #26
 80037da:	42b5      	cmp	r5, r6
 80037dc:	d11a      	bne.n	8003814 <_printf_common+0xc8>
 80037de:	2000      	movs	r0, #0
 80037e0:	e008      	b.n	80037f4 <_printf_common+0xa8>
 80037e2:	2301      	movs	r3, #1
 80037e4:	4652      	mov	r2, sl
 80037e6:	4649      	mov	r1, r9
 80037e8:	4638      	mov	r0, r7
 80037ea:	47c0      	blx	r8
 80037ec:	3001      	adds	r0, #1
 80037ee:	d103      	bne.n	80037f8 <_printf_common+0xac>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f8:	3501      	adds	r5, #1
 80037fa:	e7c6      	b.n	800378a <_printf_common+0x3e>
 80037fc:	18e1      	adds	r1, r4, r3
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	2030      	movs	r0, #48	; 0x30
 8003802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003806:	4422      	add	r2, r4
 8003808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800380c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003810:	3302      	adds	r3, #2
 8003812:	e7c7      	b.n	80037a4 <_printf_common+0x58>
 8003814:	2301      	movs	r3, #1
 8003816:	4622      	mov	r2, r4
 8003818:	4649      	mov	r1, r9
 800381a:	4638      	mov	r0, r7
 800381c:	47c0      	blx	r8
 800381e:	3001      	adds	r0, #1
 8003820:	d0e6      	beq.n	80037f0 <_printf_common+0xa4>
 8003822:	3601      	adds	r6, #1
 8003824:	e7d9      	b.n	80037da <_printf_common+0x8e>
	...

08003828 <_printf_i>:
 8003828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	7e0f      	ldrb	r7, [r1, #24]
 800382e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003830:	2f78      	cmp	r7, #120	; 0x78
 8003832:	4691      	mov	r9, r2
 8003834:	4680      	mov	r8, r0
 8003836:	460c      	mov	r4, r1
 8003838:	469a      	mov	sl, r3
 800383a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800383e:	d807      	bhi.n	8003850 <_printf_i+0x28>
 8003840:	2f62      	cmp	r7, #98	; 0x62
 8003842:	d80a      	bhi.n	800385a <_printf_i+0x32>
 8003844:	2f00      	cmp	r7, #0
 8003846:	f000 80d8 	beq.w	80039fa <_printf_i+0x1d2>
 800384a:	2f58      	cmp	r7, #88	; 0x58
 800384c:	f000 80a3 	beq.w	8003996 <_printf_i+0x16e>
 8003850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003858:	e03a      	b.n	80038d0 <_printf_i+0xa8>
 800385a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800385e:	2b15      	cmp	r3, #21
 8003860:	d8f6      	bhi.n	8003850 <_printf_i+0x28>
 8003862:	a101      	add	r1, pc, #4	; (adr r1, 8003868 <_printf_i+0x40>)
 8003864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003868:	080038c1 	.word	0x080038c1
 800386c:	080038d5 	.word	0x080038d5
 8003870:	08003851 	.word	0x08003851
 8003874:	08003851 	.word	0x08003851
 8003878:	08003851 	.word	0x08003851
 800387c:	08003851 	.word	0x08003851
 8003880:	080038d5 	.word	0x080038d5
 8003884:	08003851 	.word	0x08003851
 8003888:	08003851 	.word	0x08003851
 800388c:	08003851 	.word	0x08003851
 8003890:	08003851 	.word	0x08003851
 8003894:	080039e1 	.word	0x080039e1
 8003898:	08003905 	.word	0x08003905
 800389c:	080039c3 	.word	0x080039c3
 80038a0:	08003851 	.word	0x08003851
 80038a4:	08003851 	.word	0x08003851
 80038a8:	08003a03 	.word	0x08003a03
 80038ac:	08003851 	.word	0x08003851
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003851 	.word	0x08003851
 80038b8:	08003851 	.word	0x08003851
 80038bc:	080039cb 	.word	0x080039cb
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	602a      	str	r2, [r5, #0]
 80038c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0a3      	b.n	8003a1c <_printf_i+0x1f4>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	6829      	ldr	r1, [r5, #0]
 80038d8:	0606      	lsls	r6, r0, #24
 80038da:	f101 0304 	add.w	r3, r1, #4
 80038de:	d50a      	bpl.n	80038f6 <_printf_i+0xce>
 80038e0:	680e      	ldr	r6, [r1, #0]
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	2e00      	cmp	r6, #0
 80038e6:	da03      	bge.n	80038f0 <_printf_i+0xc8>
 80038e8:	232d      	movs	r3, #45	; 0x2d
 80038ea:	4276      	negs	r6, r6
 80038ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038f0:	485e      	ldr	r0, [pc, #376]	; (8003a6c <_printf_i+0x244>)
 80038f2:	230a      	movs	r3, #10
 80038f4:	e019      	b.n	800392a <_printf_i+0x102>
 80038f6:	680e      	ldr	r6, [r1, #0]
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038fe:	bf18      	it	ne
 8003900:	b236      	sxthne	r6, r6
 8003902:	e7ef      	b.n	80038e4 <_printf_i+0xbc>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	1d19      	adds	r1, r3, #4
 800390a:	6029      	str	r1, [r5, #0]
 800390c:	0601      	lsls	r1, r0, #24
 800390e:	d501      	bpl.n	8003914 <_printf_i+0xec>
 8003910:	681e      	ldr	r6, [r3, #0]
 8003912:	e002      	b.n	800391a <_printf_i+0xf2>
 8003914:	0646      	lsls	r6, r0, #25
 8003916:	d5fb      	bpl.n	8003910 <_printf_i+0xe8>
 8003918:	881e      	ldrh	r6, [r3, #0]
 800391a:	4854      	ldr	r0, [pc, #336]	; (8003a6c <_printf_i+0x244>)
 800391c:	2f6f      	cmp	r7, #111	; 0x6f
 800391e:	bf0c      	ite	eq
 8003920:	2308      	moveq	r3, #8
 8003922:	230a      	movne	r3, #10
 8003924:	2100      	movs	r1, #0
 8003926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800392a:	6865      	ldr	r5, [r4, #4]
 800392c:	60a5      	str	r5, [r4, #8]
 800392e:	2d00      	cmp	r5, #0
 8003930:	bfa2      	ittt	ge
 8003932:	6821      	ldrge	r1, [r4, #0]
 8003934:	f021 0104 	bicge.w	r1, r1, #4
 8003938:	6021      	strge	r1, [r4, #0]
 800393a:	b90e      	cbnz	r6, 8003940 <_printf_i+0x118>
 800393c:	2d00      	cmp	r5, #0
 800393e:	d04d      	beq.n	80039dc <_printf_i+0x1b4>
 8003940:	4615      	mov	r5, r2
 8003942:	fbb6 f1f3 	udiv	r1, r6, r3
 8003946:	fb03 6711 	mls	r7, r3, r1, r6
 800394a:	5dc7      	ldrb	r7, [r0, r7]
 800394c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003950:	4637      	mov	r7, r6
 8003952:	42bb      	cmp	r3, r7
 8003954:	460e      	mov	r6, r1
 8003956:	d9f4      	bls.n	8003942 <_printf_i+0x11a>
 8003958:	2b08      	cmp	r3, #8
 800395a:	d10b      	bne.n	8003974 <_printf_i+0x14c>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	07de      	lsls	r6, r3, #31
 8003960:	d508      	bpl.n	8003974 <_printf_i+0x14c>
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	6861      	ldr	r1, [r4, #4]
 8003966:	4299      	cmp	r1, r3
 8003968:	bfde      	ittt	le
 800396a:	2330      	movle	r3, #48	; 0x30
 800396c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003970:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003974:	1b52      	subs	r2, r2, r5
 8003976:	6122      	str	r2, [r4, #16]
 8003978:	f8cd a000 	str.w	sl, [sp]
 800397c:	464b      	mov	r3, r9
 800397e:	aa03      	add	r2, sp, #12
 8003980:	4621      	mov	r1, r4
 8003982:	4640      	mov	r0, r8
 8003984:	f7ff fee2 	bl	800374c <_printf_common>
 8003988:	3001      	adds	r0, #1
 800398a:	d14c      	bne.n	8003a26 <_printf_i+0x1fe>
 800398c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003990:	b004      	add	sp, #16
 8003992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003996:	4835      	ldr	r0, [pc, #212]	; (8003a6c <_printf_i+0x244>)
 8003998:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800399c:	6829      	ldr	r1, [r5, #0]
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80039a4:	6029      	str	r1, [r5, #0]
 80039a6:	061d      	lsls	r5, r3, #24
 80039a8:	d514      	bpl.n	80039d4 <_printf_i+0x1ac>
 80039aa:	07df      	lsls	r7, r3, #31
 80039ac:	bf44      	itt	mi
 80039ae:	f043 0320 	orrmi.w	r3, r3, #32
 80039b2:	6023      	strmi	r3, [r4, #0]
 80039b4:	b91e      	cbnz	r6, 80039be <_printf_i+0x196>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	f023 0320 	bic.w	r3, r3, #32
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	2310      	movs	r3, #16
 80039c0:	e7b0      	b.n	8003924 <_printf_i+0xfc>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	f043 0320 	orr.w	r3, r3, #32
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	2378      	movs	r3, #120	; 0x78
 80039cc:	4828      	ldr	r0, [pc, #160]	; (8003a70 <_printf_i+0x248>)
 80039ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039d2:	e7e3      	b.n	800399c <_printf_i+0x174>
 80039d4:	0659      	lsls	r1, r3, #25
 80039d6:	bf48      	it	mi
 80039d8:	b2b6      	uxthmi	r6, r6
 80039da:	e7e6      	b.n	80039aa <_printf_i+0x182>
 80039dc:	4615      	mov	r5, r2
 80039de:	e7bb      	b.n	8003958 <_printf_i+0x130>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	6826      	ldr	r6, [r4, #0]
 80039e4:	6961      	ldr	r1, [r4, #20]
 80039e6:	1d18      	adds	r0, r3, #4
 80039e8:	6028      	str	r0, [r5, #0]
 80039ea:	0635      	lsls	r5, r6, #24
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0x1cc>
 80039f0:	6019      	str	r1, [r3, #0]
 80039f2:	e002      	b.n	80039fa <_printf_i+0x1d2>
 80039f4:	0670      	lsls	r0, r6, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0x1c8>
 80039f8:	8019      	strh	r1, [r3, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	4615      	mov	r5, r2
 8003a00:	e7ba      	b.n	8003978 <_printf_i+0x150>
 8003a02:	682b      	ldr	r3, [r5, #0]
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	602a      	str	r2, [r5, #0]
 8003a08:	681d      	ldr	r5, [r3, #0]
 8003a0a:	6862      	ldr	r2, [r4, #4]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f7fc fbe6 	bl	80001e0 <memchr>
 8003a14:	b108      	cbz	r0, 8003a1a <_printf_i+0x1f2>
 8003a16:	1b40      	subs	r0, r0, r5
 8003a18:	6060      	str	r0, [r4, #4]
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	6123      	str	r3, [r4, #16]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a24:	e7a8      	b.n	8003978 <_printf_i+0x150>
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	462a      	mov	r2, r5
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	47d0      	blx	sl
 8003a30:	3001      	adds	r0, #1
 8003a32:	d0ab      	beq.n	800398c <_printf_i+0x164>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	079b      	lsls	r3, r3, #30
 8003a38:	d413      	bmi.n	8003a62 <_printf_i+0x23a>
 8003a3a:	68e0      	ldr	r0, [r4, #12]
 8003a3c:	9b03      	ldr	r3, [sp, #12]
 8003a3e:	4298      	cmp	r0, r3
 8003a40:	bfb8      	it	lt
 8003a42:	4618      	movlt	r0, r3
 8003a44:	e7a4      	b.n	8003990 <_printf_i+0x168>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	47d0      	blx	sl
 8003a50:	3001      	adds	r0, #1
 8003a52:	d09b      	beq.n	800398c <_printf_i+0x164>
 8003a54:	3501      	adds	r5, #1
 8003a56:	68e3      	ldr	r3, [r4, #12]
 8003a58:	9903      	ldr	r1, [sp, #12]
 8003a5a:	1a5b      	subs	r3, r3, r1
 8003a5c:	42ab      	cmp	r3, r5
 8003a5e:	dcf2      	bgt.n	8003a46 <_printf_i+0x21e>
 8003a60:	e7eb      	b.n	8003a3a <_printf_i+0x212>
 8003a62:	2500      	movs	r5, #0
 8003a64:	f104 0619 	add.w	r6, r4, #25
 8003a68:	e7f5      	b.n	8003a56 <_printf_i+0x22e>
 8003a6a:	bf00      	nop
 8003a6c:	080044b7 	.word	0x080044b7
 8003a70:	080044c8 	.word	0x080044c8

08003a74 <_sbrk_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4d06      	ldr	r5, [pc, #24]	; (8003a90 <_sbrk_r+0x1c>)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	f7fd feb8 	bl	80017f4 <_sbrk>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_sbrk_r+0x1a>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_sbrk_r+0x1a>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	20000160 	.word	0x20000160

08003a94 <__swbuf_r>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	460e      	mov	r6, r1
 8003a98:	4614      	mov	r4, r2
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	b118      	cbz	r0, 8003aa6 <__swbuf_r+0x12>
 8003a9e:	6983      	ldr	r3, [r0, #24]
 8003aa0:	b90b      	cbnz	r3, 8003aa6 <__swbuf_r+0x12>
 8003aa2:	f000 f9d9 	bl	8003e58 <__sinit>
 8003aa6:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <__swbuf_r+0x98>)
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	d12b      	bne.n	8003b04 <__swbuf_r+0x70>
 8003aac:	686c      	ldr	r4, [r5, #4]
 8003aae:	69a3      	ldr	r3, [r4, #24]
 8003ab0:	60a3      	str	r3, [r4, #8]
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	071a      	lsls	r2, r3, #28
 8003ab6:	d52f      	bpl.n	8003b18 <__swbuf_r+0x84>
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	b36b      	cbz	r3, 8003b18 <__swbuf_r+0x84>
 8003abc:	6923      	ldr	r3, [r4, #16]
 8003abe:	6820      	ldr	r0, [r4, #0]
 8003ac0:	1ac0      	subs	r0, r0, r3
 8003ac2:	6963      	ldr	r3, [r4, #20]
 8003ac4:	b2f6      	uxtb	r6, r6
 8003ac6:	4283      	cmp	r3, r0
 8003ac8:	4637      	mov	r7, r6
 8003aca:	dc04      	bgt.n	8003ad6 <__swbuf_r+0x42>
 8003acc:	4621      	mov	r1, r4
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 f92e 	bl	8003d30 <_fflush_r>
 8003ad4:	bb30      	cbnz	r0, 8003b24 <__swbuf_r+0x90>
 8003ad6:	68a3      	ldr	r3, [r4, #8]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	60a3      	str	r3, [r4, #8]
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	6022      	str	r2, [r4, #0]
 8003ae2:	701e      	strb	r6, [r3, #0]
 8003ae4:	6963      	ldr	r3, [r4, #20]
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	4283      	cmp	r3, r0
 8003aea:	d004      	beq.n	8003af6 <__swbuf_r+0x62>
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	07db      	lsls	r3, r3, #31
 8003af0:	d506      	bpl.n	8003b00 <__swbuf_r+0x6c>
 8003af2:	2e0a      	cmp	r6, #10
 8003af4:	d104      	bne.n	8003b00 <__swbuf_r+0x6c>
 8003af6:	4621      	mov	r1, r4
 8003af8:	4628      	mov	r0, r5
 8003afa:	f000 f919 	bl	8003d30 <_fflush_r>
 8003afe:	b988      	cbnz	r0, 8003b24 <__swbuf_r+0x90>
 8003b00:	4638      	mov	r0, r7
 8003b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <__swbuf_r+0x9c>)
 8003b06:	429c      	cmp	r4, r3
 8003b08:	d101      	bne.n	8003b0e <__swbuf_r+0x7a>
 8003b0a:	68ac      	ldr	r4, [r5, #8]
 8003b0c:	e7cf      	b.n	8003aae <__swbuf_r+0x1a>
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <__swbuf_r+0xa0>)
 8003b10:	429c      	cmp	r4, r3
 8003b12:	bf08      	it	eq
 8003b14:	68ec      	ldreq	r4, [r5, #12]
 8003b16:	e7ca      	b.n	8003aae <__swbuf_r+0x1a>
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 f80c 	bl	8003b38 <__swsetup_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d0cb      	beq.n	8003abc <__swbuf_r+0x28>
 8003b24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b28:	e7ea      	b.n	8003b00 <__swbuf_r+0x6c>
 8003b2a:	bf00      	nop
 8003b2c:	080044fc 	.word	0x080044fc
 8003b30:	0800451c 	.word	0x0800451c
 8003b34:	080044dc 	.word	0x080044dc

08003b38 <__swsetup_r>:
 8003b38:	4b32      	ldr	r3, [pc, #200]	; (8003c04 <__swsetup_r+0xcc>)
 8003b3a:	b570      	push	{r4, r5, r6, lr}
 8003b3c:	681d      	ldr	r5, [r3, #0]
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460c      	mov	r4, r1
 8003b42:	b125      	cbz	r5, 8003b4e <__swsetup_r+0x16>
 8003b44:	69ab      	ldr	r3, [r5, #24]
 8003b46:	b913      	cbnz	r3, 8003b4e <__swsetup_r+0x16>
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 f985 	bl	8003e58 <__sinit>
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <__swsetup_r+0xd0>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	d10f      	bne.n	8003b74 <__swsetup_r+0x3c>
 8003b54:	686c      	ldr	r4, [r5, #4]
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b5c:	0719      	lsls	r1, r3, #28
 8003b5e:	d42c      	bmi.n	8003bba <__swsetup_r+0x82>
 8003b60:	06dd      	lsls	r5, r3, #27
 8003b62:	d411      	bmi.n	8003b88 <__swsetup_r+0x50>
 8003b64:	2309      	movs	r3, #9
 8003b66:	6033      	str	r3, [r6, #0]
 8003b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b72:	e03e      	b.n	8003bf2 <__swsetup_r+0xba>
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <__swsetup_r+0xd4>)
 8003b76:	429c      	cmp	r4, r3
 8003b78:	d101      	bne.n	8003b7e <__swsetup_r+0x46>
 8003b7a:	68ac      	ldr	r4, [r5, #8]
 8003b7c:	e7eb      	b.n	8003b56 <__swsetup_r+0x1e>
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <__swsetup_r+0xd8>)
 8003b80:	429c      	cmp	r4, r3
 8003b82:	bf08      	it	eq
 8003b84:	68ec      	ldreq	r4, [r5, #12]
 8003b86:	e7e6      	b.n	8003b56 <__swsetup_r+0x1e>
 8003b88:	0758      	lsls	r0, r3, #29
 8003b8a:	d512      	bpl.n	8003bb2 <__swsetup_r+0x7a>
 8003b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b8e:	b141      	cbz	r1, 8003ba2 <__swsetup_r+0x6a>
 8003b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b94:	4299      	cmp	r1, r3
 8003b96:	d002      	beq.n	8003b9e <__swsetup_r+0x66>
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff fa41 	bl	8003020 <_free_r>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	2300      	movs	r3, #0
 8003bac:	6063      	str	r3, [r4, #4]
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	f043 0308 	orr.w	r3, r3, #8
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	b94b      	cbnz	r3, 8003bd2 <__swsetup_r+0x9a>
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d003      	beq.n	8003bd2 <__swsetup_r+0x9a>
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f000 fa09 	bl	8003fe4 <__smakebuf_r>
 8003bd2:	89a0      	ldrh	r0, [r4, #12]
 8003bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bd8:	f010 0301 	ands.w	r3, r0, #1
 8003bdc:	d00a      	beq.n	8003bf4 <__swsetup_r+0xbc>
 8003bde:	2300      	movs	r3, #0
 8003be0:	60a3      	str	r3, [r4, #8]
 8003be2:	6963      	ldr	r3, [r4, #20]
 8003be4:	425b      	negs	r3, r3
 8003be6:	61a3      	str	r3, [r4, #24]
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	b943      	cbnz	r3, 8003bfe <__swsetup_r+0xc6>
 8003bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bf0:	d1ba      	bne.n	8003b68 <__swsetup_r+0x30>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	0781      	lsls	r1, r0, #30
 8003bf6:	bf58      	it	pl
 8003bf8:	6963      	ldrpl	r3, [r4, #20]
 8003bfa:	60a3      	str	r3, [r4, #8]
 8003bfc:	e7f4      	b.n	8003be8 <__swsetup_r+0xb0>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e7f7      	b.n	8003bf2 <__swsetup_r+0xba>
 8003c02:	bf00      	nop
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	080044fc 	.word	0x080044fc
 8003c0c:	0800451c 	.word	0x0800451c
 8003c10:	080044dc 	.word	0x080044dc

08003c14 <abort>:
 8003c14:	b508      	push	{r3, lr}
 8003c16:	2006      	movs	r0, #6
 8003c18:	f000 faa2 	bl	8004160 <raise>
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7fd fd71 	bl	8001704 <_exit>
	...

08003c24 <__sflush_r>:
 8003c24:	898a      	ldrh	r2, [r1, #12]
 8003c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	0710      	lsls	r0, r2, #28
 8003c2e:	460c      	mov	r4, r1
 8003c30:	d458      	bmi.n	8003ce4 <__sflush_r+0xc0>
 8003c32:	684b      	ldr	r3, [r1, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	dc05      	bgt.n	8003c44 <__sflush_r+0x20>
 8003c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	dc02      	bgt.n	8003c44 <__sflush_r+0x20>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c46:	2e00      	cmp	r6, #0
 8003c48:	d0f9      	beq.n	8003c3e <__sflush_r+0x1a>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c50:	682f      	ldr	r7, [r5, #0]
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	d032      	beq.n	8003cbc <__sflush_r+0x98>
 8003c56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	075a      	lsls	r2, r3, #29
 8003c5c:	d505      	bpl.n	8003c6a <__sflush_r+0x46>
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	1ac0      	subs	r0, r0, r3
 8003c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c64:	b10b      	cbz	r3, 8003c6a <__sflush_r+0x46>
 8003c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c68:	1ac0      	subs	r0, r0, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c70:	6a21      	ldr	r1, [r4, #32]
 8003c72:	4628      	mov	r0, r5
 8003c74:	47b0      	blx	r6
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	d106      	bne.n	8003c8a <__sflush_r+0x66>
 8003c7c:	6829      	ldr	r1, [r5, #0]
 8003c7e:	291d      	cmp	r1, #29
 8003c80:	d82c      	bhi.n	8003cdc <__sflush_r+0xb8>
 8003c82:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <__sflush_r+0x108>)
 8003c84:	40ca      	lsrs	r2, r1
 8003c86:	07d6      	lsls	r6, r2, #31
 8003c88:	d528      	bpl.n	8003cdc <__sflush_r+0xb8>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	6062      	str	r2, [r4, #4]
 8003c8e:	04d9      	lsls	r1, r3, #19
 8003c90:	6922      	ldr	r2, [r4, #16]
 8003c92:	6022      	str	r2, [r4, #0]
 8003c94:	d504      	bpl.n	8003ca0 <__sflush_r+0x7c>
 8003c96:	1c42      	adds	r2, r0, #1
 8003c98:	d101      	bne.n	8003c9e <__sflush_r+0x7a>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	b903      	cbnz	r3, 8003ca0 <__sflush_r+0x7c>
 8003c9e:	6560      	str	r0, [r4, #84]	; 0x54
 8003ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca2:	602f      	str	r7, [r5, #0]
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d0ca      	beq.n	8003c3e <__sflush_r+0x1a>
 8003ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cac:	4299      	cmp	r1, r3
 8003cae:	d002      	beq.n	8003cb6 <__sflush_r+0x92>
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7ff f9b5 	bl	8003020 <_free_r>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	6360      	str	r0, [r4, #52]	; 0x34
 8003cba:	e7c1      	b.n	8003c40 <__sflush_r+0x1c>
 8003cbc:	6a21      	ldr	r1, [r4, #32]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	47b0      	blx	r6
 8003cc4:	1c41      	adds	r1, r0, #1
 8003cc6:	d1c7      	bne.n	8003c58 <__sflush_r+0x34>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0c4      	beq.n	8003c58 <__sflush_r+0x34>
 8003cce:	2b1d      	cmp	r3, #29
 8003cd0:	d001      	beq.n	8003cd6 <__sflush_r+0xb2>
 8003cd2:	2b16      	cmp	r3, #22
 8003cd4:	d101      	bne.n	8003cda <__sflush_r+0xb6>
 8003cd6:	602f      	str	r7, [r5, #0]
 8003cd8:	e7b1      	b.n	8003c3e <__sflush_r+0x1a>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	e7ad      	b.n	8003c40 <__sflush_r+0x1c>
 8003ce4:	690f      	ldr	r7, [r1, #16]
 8003ce6:	2f00      	cmp	r7, #0
 8003ce8:	d0a9      	beq.n	8003c3e <__sflush_r+0x1a>
 8003cea:	0793      	lsls	r3, r2, #30
 8003cec:	680e      	ldr	r6, [r1, #0]
 8003cee:	bf08      	it	eq
 8003cf0:	694b      	ldreq	r3, [r1, #20]
 8003cf2:	600f      	str	r7, [r1, #0]
 8003cf4:	bf18      	it	ne
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	eba6 0807 	sub.w	r8, r6, r7
 8003cfc:	608b      	str	r3, [r1, #8]
 8003cfe:	f1b8 0f00 	cmp.w	r8, #0
 8003d02:	dd9c      	ble.n	8003c3e <__sflush_r+0x1a>
 8003d04:	6a21      	ldr	r1, [r4, #32]
 8003d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d08:	4643      	mov	r3, r8
 8003d0a:	463a      	mov	r2, r7
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	47b0      	blx	r6
 8003d10:	2800      	cmp	r0, #0
 8003d12:	dc06      	bgt.n	8003d22 <__sflush_r+0xfe>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d20:	e78e      	b.n	8003c40 <__sflush_r+0x1c>
 8003d22:	4407      	add	r7, r0
 8003d24:	eba8 0800 	sub.w	r8, r8, r0
 8003d28:	e7e9      	b.n	8003cfe <__sflush_r+0xda>
 8003d2a:	bf00      	nop
 8003d2c:	20400001 	.word	0x20400001

08003d30 <_fflush_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	690b      	ldr	r3, [r1, #16]
 8003d34:	4605      	mov	r5, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	b913      	cbnz	r3, 8003d40 <_fflush_r+0x10>
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	b118      	cbz	r0, 8003d4a <_fflush_r+0x1a>
 8003d42:	6983      	ldr	r3, [r0, #24]
 8003d44:	b90b      	cbnz	r3, 8003d4a <_fflush_r+0x1a>
 8003d46:	f000 f887 	bl	8003e58 <__sinit>
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <_fflush_r+0x6c>)
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	d11b      	bne.n	8003d88 <_fflush_r+0x58>
 8003d50:	686c      	ldr	r4, [r5, #4]
 8003d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ef      	beq.n	8003d3a <_fflush_r+0xa>
 8003d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d5c:	07d0      	lsls	r0, r2, #31
 8003d5e:	d404      	bmi.n	8003d6a <_fflush_r+0x3a>
 8003d60:	0599      	lsls	r1, r3, #22
 8003d62:	d402      	bmi.n	8003d6a <_fflush_r+0x3a>
 8003d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d66:	f000 f915 	bl	8003f94 <__retarget_lock_acquire_recursive>
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	f7ff ff59 	bl	8003c24 <__sflush_r>
 8003d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d74:	07da      	lsls	r2, r3, #31
 8003d76:	4605      	mov	r5, r0
 8003d78:	d4e0      	bmi.n	8003d3c <_fflush_r+0xc>
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	059b      	lsls	r3, r3, #22
 8003d7e:	d4dd      	bmi.n	8003d3c <_fflush_r+0xc>
 8003d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d82:	f000 f908 	bl	8003f96 <__retarget_lock_release_recursive>
 8003d86:	e7d9      	b.n	8003d3c <_fflush_r+0xc>
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <_fflush_r+0x70>)
 8003d8a:	429c      	cmp	r4, r3
 8003d8c:	d101      	bne.n	8003d92 <_fflush_r+0x62>
 8003d8e:	68ac      	ldr	r4, [r5, #8]
 8003d90:	e7df      	b.n	8003d52 <_fflush_r+0x22>
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <_fflush_r+0x74>)
 8003d94:	429c      	cmp	r4, r3
 8003d96:	bf08      	it	eq
 8003d98:	68ec      	ldreq	r4, [r5, #12]
 8003d9a:	e7da      	b.n	8003d52 <_fflush_r+0x22>
 8003d9c:	080044fc 	.word	0x080044fc
 8003da0:	0800451c 	.word	0x0800451c
 8003da4:	080044dc 	.word	0x080044dc

08003da8 <std>:
 8003da8:	2300      	movs	r3, #0
 8003daa:	b510      	push	{r4, lr}
 8003dac:	4604      	mov	r4, r0
 8003dae:	e9c0 3300 	strd	r3, r3, [r0]
 8003db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003db6:	6083      	str	r3, [r0, #8]
 8003db8:	8181      	strh	r1, [r0, #12]
 8003dba:	6643      	str	r3, [r0, #100]	; 0x64
 8003dbc:	81c2      	strh	r2, [r0, #14]
 8003dbe:	6183      	str	r3, [r0, #24]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	305c      	adds	r0, #92	; 0x5c
 8003dc6:	f7ff f833 	bl	8002e30 <memset>
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <std+0x38>)
 8003dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <std+0x3c>)
 8003dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <std+0x40>)
 8003dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std+0x44>)
 8003dd8:	6224      	str	r4, [r4, #32]
 8003dda:	6323      	str	r3, [r4, #48]	; 0x30
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	bf00      	nop
 8003de0:	08004199 	.word	0x08004199
 8003de4:	080041bb 	.word	0x080041bb
 8003de8:	080041f3 	.word	0x080041f3
 8003dec:	08004217 	.word	0x08004217

08003df0 <_cleanup_r>:
 8003df0:	4901      	ldr	r1, [pc, #4]	; (8003df8 <_cleanup_r+0x8>)
 8003df2:	f000 b8af 	b.w	8003f54 <_fwalk_reent>
 8003df6:	bf00      	nop
 8003df8:	08003d31 	.word	0x08003d31

08003dfc <__sfmoreglue>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	2268      	movs	r2, #104	; 0x68
 8003e00:	1e4d      	subs	r5, r1, #1
 8003e02:	4355      	muls	r5, r2
 8003e04:	460e      	mov	r6, r1
 8003e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e0a:	f7ff f975 	bl	80030f8 <_malloc_r>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	b140      	cbz	r0, 8003e24 <__sfmoreglue+0x28>
 8003e12:	2100      	movs	r1, #0
 8003e14:	e9c0 1600 	strd	r1, r6, [r0]
 8003e18:	300c      	adds	r0, #12
 8003e1a:	60a0      	str	r0, [r4, #8]
 8003e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e20:	f7ff f806 	bl	8002e30 <memset>
 8003e24:	4620      	mov	r0, r4
 8003e26:	bd70      	pop	{r4, r5, r6, pc}

08003e28 <__sfp_lock_acquire>:
 8003e28:	4801      	ldr	r0, [pc, #4]	; (8003e30 <__sfp_lock_acquire+0x8>)
 8003e2a:	f000 b8b3 	b.w	8003f94 <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	20000165 	.word	0x20000165

08003e34 <__sfp_lock_release>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__sfp_lock_release+0x8>)
 8003e36:	f000 b8ae 	b.w	8003f96 <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	20000165 	.word	0x20000165

08003e40 <__sinit_lock_acquire>:
 8003e40:	4801      	ldr	r0, [pc, #4]	; (8003e48 <__sinit_lock_acquire+0x8>)
 8003e42:	f000 b8a7 	b.w	8003f94 <__retarget_lock_acquire_recursive>
 8003e46:	bf00      	nop
 8003e48:	20000166 	.word	0x20000166

08003e4c <__sinit_lock_release>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__sinit_lock_release+0x8>)
 8003e4e:	f000 b8a2 	b.w	8003f96 <__retarget_lock_release_recursive>
 8003e52:	bf00      	nop
 8003e54:	20000166 	.word	0x20000166

08003e58 <__sinit>:
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	f7ff fff0 	bl	8003e40 <__sinit_lock_acquire>
 8003e60:	69a3      	ldr	r3, [r4, #24]
 8003e62:	b11b      	cbz	r3, 8003e6c <__sinit+0x14>
 8003e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e68:	f7ff bff0 	b.w	8003e4c <__sinit_lock_release>
 8003e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e70:	6523      	str	r3, [r4, #80]	; 0x50
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <__sinit+0x68>)
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <__sinit+0x6c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	bf04      	itt	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	61a3      	streq	r3, [r4, #24]
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 f820 	bl	8003ec8 <__sfp>
 8003e88:	6060      	str	r0, [r4, #4]
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 f81c 	bl	8003ec8 <__sfp>
 8003e90:	60a0      	str	r0, [r4, #8]
 8003e92:	4620      	mov	r0, r4
 8003e94:	f000 f818 	bl	8003ec8 <__sfp>
 8003e98:	2200      	movs	r2, #0
 8003e9a:	60e0      	str	r0, [r4, #12]
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	6860      	ldr	r0, [r4, #4]
 8003ea0:	f7ff ff82 	bl	8003da8 <std>
 8003ea4:	68a0      	ldr	r0, [r4, #8]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2109      	movs	r1, #9
 8003eaa:	f7ff ff7d 	bl	8003da8 <std>
 8003eae:	68e0      	ldr	r0, [r4, #12]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	2112      	movs	r1, #18
 8003eb4:	f7ff ff78 	bl	8003da8 <std>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	61a3      	str	r3, [r4, #24]
 8003ebc:	e7d2      	b.n	8003e64 <__sinit+0xc>
 8003ebe:	bf00      	nop
 8003ec0:	080043f4 	.word	0x080043f4
 8003ec4:	08003df1 	.word	0x08003df1

08003ec8 <__sfp>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	4607      	mov	r7, r0
 8003ecc:	f7ff ffac 	bl	8003e28 <__sfp_lock_acquire>
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <__sfp+0x84>)
 8003ed2:	681e      	ldr	r6, [r3, #0]
 8003ed4:	69b3      	ldr	r3, [r6, #24]
 8003ed6:	b913      	cbnz	r3, 8003ede <__sfp+0x16>
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff ffbd 	bl	8003e58 <__sinit>
 8003ede:	3648      	adds	r6, #72	; 0x48
 8003ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	d503      	bpl.n	8003ef0 <__sfp+0x28>
 8003ee8:	6833      	ldr	r3, [r6, #0]
 8003eea:	b30b      	cbz	r3, 8003f30 <__sfp+0x68>
 8003eec:	6836      	ldr	r6, [r6, #0]
 8003eee:	e7f7      	b.n	8003ee0 <__sfp+0x18>
 8003ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ef4:	b9d5      	cbnz	r5, 8003f2c <__sfp+0x64>
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <__sfp+0x88>)
 8003ef8:	60e3      	str	r3, [r4, #12]
 8003efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003efe:	6665      	str	r5, [r4, #100]	; 0x64
 8003f00:	f000 f847 	bl	8003f92 <__retarget_lock_init_recursive>
 8003f04:	f7ff ff96 	bl	8003e34 <__sfp_lock_release>
 8003f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f10:	6025      	str	r5, [r4, #0]
 8003f12:	61a5      	str	r5, [r4, #24]
 8003f14:	2208      	movs	r2, #8
 8003f16:	4629      	mov	r1, r5
 8003f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f1c:	f7fe ff88 	bl	8002e30 <memset>
 8003f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f28:	4620      	mov	r0, r4
 8003f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f2c:	3468      	adds	r4, #104	; 0x68
 8003f2e:	e7d9      	b.n	8003ee4 <__sfp+0x1c>
 8003f30:	2104      	movs	r1, #4
 8003f32:	4638      	mov	r0, r7
 8003f34:	f7ff ff62 	bl	8003dfc <__sfmoreglue>
 8003f38:	4604      	mov	r4, r0
 8003f3a:	6030      	str	r0, [r6, #0]
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1d5      	bne.n	8003eec <__sfp+0x24>
 8003f40:	f7ff ff78 	bl	8003e34 <__sfp_lock_release>
 8003f44:	230c      	movs	r3, #12
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	e7ee      	b.n	8003f28 <__sfp+0x60>
 8003f4a:	bf00      	nop
 8003f4c:	080043f4 	.word	0x080043f4
 8003f50:	ffff0001 	.word	0xffff0001

08003f54 <_fwalk_reent>:
 8003f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f58:	4606      	mov	r6, r0
 8003f5a:	4688      	mov	r8, r1
 8003f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f60:	2700      	movs	r7, #0
 8003f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f66:	f1b9 0901 	subs.w	r9, r9, #1
 8003f6a:	d505      	bpl.n	8003f78 <_fwalk_reent+0x24>
 8003f6c:	6824      	ldr	r4, [r4, #0]
 8003f6e:	2c00      	cmp	r4, #0
 8003f70:	d1f7      	bne.n	8003f62 <_fwalk_reent+0xe>
 8003f72:	4638      	mov	r0, r7
 8003f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f78:	89ab      	ldrh	r3, [r5, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d907      	bls.n	8003f8e <_fwalk_reent+0x3a>
 8003f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f82:	3301      	adds	r3, #1
 8003f84:	d003      	beq.n	8003f8e <_fwalk_reent+0x3a>
 8003f86:	4629      	mov	r1, r5
 8003f88:	4630      	mov	r0, r6
 8003f8a:	47c0      	blx	r8
 8003f8c:	4307      	orrs	r7, r0
 8003f8e:	3568      	adds	r5, #104	; 0x68
 8003f90:	e7e9      	b.n	8003f66 <_fwalk_reent+0x12>

08003f92 <__retarget_lock_init_recursive>:
 8003f92:	4770      	bx	lr

08003f94 <__retarget_lock_acquire_recursive>:
 8003f94:	4770      	bx	lr

08003f96 <__retarget_lock_release_recursive>:
 8003f96:	4770      	bx	lr

08003f98 <__swhatbuf_r>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	460e      	mov	r6, r1
 8003f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	b096      	sub	sp, #88	; 0x58
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	da08      	bge.n	8003fbc <__swhatbuf_r+0x24>
 8003faa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	061a      	lsls	r2, r3, #24
 8003fb4:	d410      	bmi.n	8003fd8 <__swhatbuf_r+0x40>
 8003fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fba:	e00e      	b.n	8003fda <__swhatbuf_r+0x42>
 8003fbc:	466a      	mov	r2, sp
 8003fbe:	f000 f951 	bl	8004264 <_fstat_r>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	dbf1      	blt.n	8003faa <__swhatbuf_r+0x12>
 8003fc6:	9a01      	ldr	r2, [sp, #4]
 8003fc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fd0:	425a      	negs	r2, r3
 8003fd2:	415a      	adcs	r2, r3
 8003fd4:	602a      	str	r2, [r5, #0]
 8003fd6:	e7ee      	b.n	8003fb6 <__swhatbuf_r+0x1e>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	2000      	movs	r0, #0
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	b016      	add	sp, #88	; 0x58
 8003fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fe4 <__smakebuf_r>:
 8003fe4:	898b      	ldrh	r3, [r1, #12]
 8003fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fe8:	079d      	lsls	r5, r3, #30
 8003fea:	4606      	mov	r6, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	d507      	bpl.n	8004000 <__smakebuf_r+0x1c>
 8003ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	6123      	str	r3, [r4, #16]
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	6163      	str	r3, [r4, #20]
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	ab01      	add	r3, sp, #4
 8004002:	466a      	mov	r2, sp
 8004004:	f7ff ffc8 	bl	8003f98 <__swhatbuf_r>
 8004008:	9900      	ldr	r1, [sp, #0]
 800400a:	4605      	mov	r5, r0
 800400c:	4630      	mov	r0, r6
 800400e:	f7ff f873 	bl	80030f8 <_malloc_r>
 8004012:	b948      	cbnz	r0, 8004028 <__smakebuf_r+0x44>
 8004014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004018:	059a      	lsls	r2, r3, #22
 800401a:	d4ef      	bmi.n	8003ffc <__smakebuf_r+0x18>
 800401c:	f023 0303 	bic.w	r3, r3, #3
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	81a3      	strh	r3, [r4, #12]
 8004026:	e7e3      	b.n	8003ff0 <__smakebuf_r+0xc>
 8004028:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <__smakebuf_r+0x7c>)
 800402a:	62b3      	str	r3, [r6, #40]	; 0x28
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	6020      	str	r0, [r4, #0]
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	81a3      	strh	r3, [r4, #12]
 8004036:	9b00      	ldr	r3, [sp, #0]
 8004038:	6163      	str	r3, [r4, #20]
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	6120      	str	r0, [r4, #16]
 800403e:	b15b      	cbz	r3, 8004058 <__smakebuf_r+0x74>
 8004040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004044:	4630      	mov	r0, r6
 8004046:	f000 f91f 	bl	8004288 <_isatty_r>
 800404a:	b128      	cbz	r0, 8004058 <__smakebuf_r+0x74>
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	89a0      	ldrh	r0, [r4, #12]
 800405a:	4305      	orrs	r5, r0
 800405c:	81a5      	strh	r5, [r4, #12]
 800405e:	e7cd      	b.n	8003ffc <__smakebuf_r+0x18>
 8004060:	08003df1 	.word	0x08003df1

08004064 <memmove>:
 8004064:	4288      	cmp	r0, r1
 8004066:	b510      	push	{r4, lr}
 8004068:	eb01 0402 	add.w	r4, r1, r2
 800406c:	d902      	bls.n	8004074 <memmove+0x10>
 800406e:	4284      	cmp	r4, r0
 8004070:	4623      	mov	r3, r4
 8004072:	d807      	bhi.n	8004084 <memmove+0x20>
 8004074:	1e43      	subs	r3, r0, #1
 8004076:	42a1      	cmp	r1, r4
 8004078:	d008      	beq.n	800408c <memmove+0x28>
 800407a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800407e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004082:	e7f8      	b.n	8004076 <memmove+0x12>
 8004084:	4402      	add	r2, r0
 8004086:	4601      	mov	r1, r0
 8004088:	428a      	cmp	r2, r1
 800408a:	d100      	bne.n	800408e <memmove+0x2a>
 800408c:	bd10      	pop	{r4, pc}
 800408e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004096:	e7f7      	b.n	8004088 <memmove+0x24>

08004098 <__malloc_lock>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__malloc_lock+0x8>)
 800409a:	f7ff bf7b 	b.w	8003f94 <__retarget_lock_acquire_recursive>
 800409e:	bf00      	nop
 80040a0:	20000164 	.word	0x20000164

080040a4 <__malloc_unlock>:
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <__malloc_unlock+0x8>)
 80040a6:	f7ff bf76 	b.w	8003f96 <__retarget_lock_release_recursive>
 80040aa:	bf00      	nop
 80040ac:	20000164 	.word	0x20000164

080040b0 <_realloc_r>:
 80040b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b4:	4680      	mov	r8, r0
 80040b6:	4614      	mov	r4, r2
 80040b8:	460e      	mov	r6, r1
 80040ba:	b921      	cbnz	r1, 80040c6 <_realloc_r+0x16>
 80040bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	4611      	mov	r1, r2
 80040c2:	f7ff b819 	b.w	80030f8 <_malloc_r>
 80040c6:	b92a      	cbnz	r2, 80040d4 <_realloc_r+0x24>
 80040c8:	f7fe ffaa 	bl	8003020 <_free_r>
 80040cc:	4625      	mov	r5, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d4:	f000 f8fa 	bl	80042cc <_malloc_usable_size_r>
 80040d8:	4284      	cmp	r4, r0
 80040da:	4607      	mov	r7, r0
 80040dc:	d802      	bhi.n	80040e4 <_realloc_r+0x34>
 80040de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040e2:	d812      	bhi.n	800410a <_realloc_r+0x5a>
 80040e4:	4621      	mov	r1, r4
 80040e6:	4640      	mov	r0, r8
 80040e8:	f7ff f806 	bl	80030f8 <_malloc_r>
 80040ec:	4605      	mov	r5, r0
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0ed      	beq.n	80040ce <_realloc_r+0x1e>
 80040f2:	42bc      	cmp	r4, r7
 80040f4:	4622      	mov	r2, r4
 80040f6:	4631      	mov	r1, r6
 80040f8:	bf28      	it	cs
 80040fa:	463a      	movcs	r2, r7
 80040fc:	f7fe fe8a 	bl	8002e14 <memcpy>
 8004100:	4631      	mov	r1, r6
 8004102:	4640      	mov	r0, r8
 8004104:	f7fe ff8c 	bl	8003020 <_free_r>
 8004108:	e7e1      	b.n	80040ce <_realloc_r+0x1e>
 800410a:	4635      	mov	r5, r6
 800410c:	e7df      	b.n	80040ce <_realloc_r+0x1e>

0800410e <_raise_r>:
 800410e:	291f      	cmp	r1, #31
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4604      	mov	r4, r0
 8004114:	460d      	mov	r5, r1
 8004116:	d904      	bls.n	8004122 <_raise_r+0x14>
 8004118:	2316      	movs	r3, #22
 800411a:	6003      	str	r3, [r0, #0]
 800411c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004120:	bd38      	pop	{r3, r4, r5, pc}
 8004122:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004124:	b112      	cbz	r2, 800412c <_raise_r+0x1e>
 8004126:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800412a:	b94b      	cbnz	r3, 8004140 <_raise_r+0x32>
 800412c:	4620      	mov	r0, r4
 800412e:	f000 f831 	bl	8004194 <_getpid_r>
 8004132:	462a      	mov	r2, r5
 8004134:	4601      	mov	r1, r0
 8004136:	4620      	mov	r0, r4
 8004138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800413c:	f000 b818 	b.w	8004170 <_kill_r>
 8004140:	2b01      	cmp	r3, #1
 8004142:	d00a      	beq.n	800415a <_raise_r+0x4c>
 8004144:	1c59      	adds	r1, r3, #1
 8004146:	d103      	bne.n	8004150 <_raise_r+0x42>
 8004148:	2316      	movs	r3, #22
 800414a:	6003      	str	r3, [r0, #0]
 800414c:	2001      	movs	r0, #1
 800414e:	e7e7      	b.n	8004120 <_raise_r+0x12>
 8004150:	2400      	movs	r4, #0
 8004152:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004156:	4628      	mov	r0, r5
 8004158:	4798      	blx	r3
 800415a:	2000      	movs	r0, #0
 800415c:	e7e0      	b.n	8004120 <_raise_r+0x12>
	...

08004160 <raise>:
 8004160:	4b02      	ldr	r3, [pc, #8]	; (800416c <raise+0xc>)
 8004162:	4601      	mov	r1, r0
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	f7ff bfd2 	b.w	800410e <_raise_r>
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c

08004170 <_kill_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d07      	ldr	r5, [pc, #28]	; (8004190 <_kill_r+0x20>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	f7fd fab1 	bl	80016e4 <_kill>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d102      	bne.n	800418c <_kill_r+0x1c>
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	b103      	cbz	r3, 800418c <_kill_r+0x1c>
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	20000160 	.word	0x20000160

08004194 <_getpid_r>:
 8004194:	f7fd ba9e 	b.w	80016d4 <_getpid>

08004198 <__sread>:
 8004198:	b510      	push	{r4, lr}
 800419a:	460c      	mov	r4, r1
 800419c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a0:	f000 f89c 	bl	80042dc <_read_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	bfab      	itete	ge
 80041a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041aa:	89a3      	ldrhlt	r3, [r4, #12]
 80041ac:	181b      	addge	r3, r3, r0
 80041ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041b2:	bfac      	ite	ge
 80041b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80041b6:	81a3      	strhlt	r3, [r4, #12]
 80041b8:	bd10      	pop	{r4, pc}

080041ba <__swrite>:
 80041ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041be:	461f      	mov	r7, r3
 80041c0:	898b      	ldrh	r3, [r1, #12]
 80041c2:	05db      	lsls	r3, r3, #23
 80041c4:	4605      	mov	r5, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	4616      	mov	r6, r2
 80041ca:	d505      	bpl.n	80041d8 <__swrite+0x1e>
 80041cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d0:	2302      	movs	r3, #2
 80041d2:	2200      	movs	r2, #0
 80041d4:	f000 f868 	bl	80042a8 <_lseek_r>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e2:	81a3      	strh	r3, [r4, #12]
 80041e4:	4632      	mov	r2, r6
 80041e6:	463b      	mov	r3, r7
 80041e8:	4628      	mov	r0, r5
 80041ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ee:	f000 b817 	b.w	8004220 <_write_r>

080041f2 <__sseek>:
 80041f2:	b510      	push	{r4, lr}
 80041f4:	460c      	mov	r4, r1
 80041f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fa:	f000 f855 	bl	80042a8 <_lseek_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	bf15      	itete	ne
 8004204:	6560      	strne	r0, [r4, #84]	; 0x54
 8004206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800420a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800420e:	81a3      	strheq	r3, [r4, #12]
 8004210:	bf18      	it	ne
 8004212:	81a3      	strhne	r3, [r4, #12]
 8004214:	bd10      	pop	{r4, pc}

08004216 <__sclose>:
 8004216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421a:	f000 b813 	b.w	8004244 <_close_r>
	...

08004220 <_write_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d07      	ldr	r5, [pc, #28]	; (8004240 <_write_r+0x20>)
 8004224:	4604      	mov	r4, r0
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	2200      	movs	r2, #0
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f7fd fa8f 	bl	8001752 <_write>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_write_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_write_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	20000160 	.word	0x20000160

08004244 <_close_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4d06      	ldr	r5, [pc, #24]	; (8004260 <_close_r+0x1c>)
 8004248:	2300      	movs	r3, #0
 800424a:	4604      	mov	r4, r0
 800424c:	4608      	mov	r0, r1
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	f7fd fa9b 	bl	800178a <_close>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d102      	bne.n	800425e <_close_r+0x1a>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	b103      	cbz	r3, 800425e <_close_r+0x1a>
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	20000160 	.word	0x20000160

08004264 <_fstat_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4d07      	ldr	r5, [pc, #28]	; (8004284 <_fstat_r+0x20>)
 8004268:	2300      	movs	r3, #0
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	f7fd fa96 	bl	80017a2 <_fstat>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d102      	bne.n	8004280 <_fstat_r+0x1c>
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	b103      	cbz	r3, 8004280 <_fstat_r+0x1c>
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop
 8004284:	20000160 	.word	0x20000160

08004288 <_isatty_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4d06      	ldr	r5, [pc, #24]	; (80042a4 <_isatty_r+0x1c>)
 800428c:	2300      	movs	r3, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f7fd fa95 	bl	80017c2 <_isatty>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_isatty_r+0x1a>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_isatty_r+0x1a>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000160 	.word	0x20000160

080042a8 <_lseek_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4d07      	ldr	r5, [pc, #28]	; (80042c8 <_lseek_r+0x20>)
 80042ac:	4604      	mov	r4, r0
 80042ae:	4608      	mov	r0, r1
 80042b0:	4611      	mov	r1, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fd fa8e 	bl	80017d8 <_lseek>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_lseek_r+0x1e>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_lseek_r+0x1e>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000160 	.word	0x20000160

080042cc <_malloc_usable_size_r>:
 80042cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d0:	1f18      	subs	r0, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bfbc      	itt	lt
 80042d6:	580b      	ldrlt	r3, [r1, r0]
 80042d8:	18c0      	addlt	r0, r0, r3
 80042da:	4770      	bx	lr

080042dc <_read_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d07      	ldr	r5, [pc, #28]	; (80042fc <_read_r+0x20>)
 80042e0:	4604      	mov	r4, r0
 80042e2:	4608      	mov	r0, r1
 80042e4:	4611      	mov	r1, r2
 80042e6:	2200      	movs	r2, #0
 80042e8:	602a      	str	r2, [r5, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7fd fa14 	bl	8001718 <_read>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_read_r+0x1e>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_read_r+0x1e>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000160 	.word	0x20000160

08004300 <_gettimeofday>:
 8004300:	4b02      	ldr	r3, [pc, #8]	; (800430c <_gettimeofday+0xc>)
 8004302:	2258      	movs	r2, #88	; 0x58
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800430a:	4770      	bx	lr
 800430c:	20000160 	.word	0x20000160

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
